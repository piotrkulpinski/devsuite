(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_dafdc6._.js", {

"[project]/node_modules/hotkeys-js/dist/hotkeys.esm.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

/**! 
 * hotkeys-js v3.13.7 
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. 
 * 
 * Copyright (c) 2024 kenny wong <wowohoo@qq.com> 
 * https://github.com/jaywcjlove/hotkeys-js.git 
 * 
 * @website: https://jaywcjlove.github.io/hotkeys-js
 
 * Licensed under the MIT license 
 */ __turbopack_esm__({
    "default": ()=>hotkeys
});
const isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;
// 绑定事件
function addEvent(object, event, method, useCapture) {
    if (object.addEventListener) {
        object.addEventListener(event, method, useCapture);
    } else if (object.attachEvent) {
        object.attachEvent("on".concat(event), method);
    }
}
function removeEvent(object, event, method, useCapture) {
    if (object.removeEventListener) {
        object.removeEventListener(event, method, useCapture);
    } else if (object.detachEvent) {
        object.detachEvent("on".concat(event), method);
    }
}
// 修饰键转换成对应的键码
function getMods(modifier, key) {
    const mods = key.slice(0, key.length - 1);
    for(let i = 0; i < mods.length; i++)mods[i] = modifier[mods[i].toLowerCase()];
    return mods;
}
// 处理传的key字符串转换成数组
function getKeys(key) {
    if (typeof key !== 'string') key = '';
    key = key.replace(/\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等
    const keys = key.split(','); // 同时设置多个快捷键，以','分割
    let index = keys.lastIndexOf('');
    // 快捷键可能包含','，需特殊处理
    for(; index >= 0;){
        keys[index - 1] += ',';
        keys.splice(index, 1);
        index = keys.lastIndexOf('');
    }
    return keys;
}
// 比较修饰键的数组
function compareArray(a1, a2) {
    const arr1 = a1.length >= a2.length ? a1 : a2;
    const arr2 = a1.length >= a2.length ? a2 : a1;
    let isIndex = true;
    for(let i = 0; i < arr1.length; i++){
        if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
    }
    return isIndex;
}
// Special Keys
const _keyMap = {
    backspace: 8,
    '⌫': 8,
    tab: 9,
    clear: 12,
    enter: 13,
    '↩': 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    '⇪': 20,
    ',': 188,
    '.': 190,
    '/': 191,
    '`': 192,
    '-': isff ? 173 : 189,
    '=': isff ? 61 : 187,
    ';': isff ? 59 : 186,
    '\'': 222,
    '[': 219,
    ']': 221,
    '\\': 220
};
// Modifier Keys
const _modifier = {
    // shiftKey
    '⇧': 16,
    shift: 16,
    // altKey
    '⌥': 18,
    alt: 18,
    option: 18,
    // ctrlKey
    '⌃': 17,
    ctrl: 17,
    control: 17,
    // metaKey
    '⌘': 91,
    cmd: 91,
    command: 91
};
const modifierMap = {
    16: 'shiftKey',
    18: 'altKey',
    17: 'ctrlKey',
    91: 'metaKey',
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
};
const _mods = {
    16: false,
    18: false,
    17: false,
    91: false
};
const _handlers = {};
// F1~F12 special key
for(let k = 1; k < 20; k++){
    _keyMap["f".concat(k)] = 111 + k;
}
let _downKeys = []; // 记录摁下的绑定键
let winListendFocus = null; // window是否已经监听了focus事件
let _scope = 'all'; // 默认热键范围
const elementEventMap = new Map(); // 已绑定事件的节点记录
// 返回键码
const code = (x)=>_keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
const getKey = (x)=>Object.keys(_keyMap).find((k)=>_keyMap[k] === x);
const getModifier = (x)=>Object.keys(_modifier).find((k)=>_modifier[k] === x);
// 设置获取当前范围（默认为'所有'）
function setScope(scope) {
    _scope = scope || 'all';
}
// 获取当前范围
function getScope() {
    return _scope || 'all';
}
// 获取摁下绑定键的键值
function getPressedKeyCodes() {
    return _downKeys.slice(0);
}
function getPressedKeyString() {
    return _downKeys.map((c)=>getKey(c) || getModifier(c) || String.fromCharCode(c));
}
function getAllKeyCodes() {
    const result = [];
    Object.keys(_handlers).forEach((k)=>{
        _handlers[k].forEach((_ref)=>{
            let { key, scope, mods, shortcut } = _ref;
            result.push({
                scope,
                shortcut,
                mods,
                keys: key.split('+').map((v)=>code(v))
            });
        });
    });
    return result;
}
// 表单控件控件判断 返回 Boolean
// hotkey is effective only when filter return true
function filter(event) {
    const target = event.target || event.srcElement;
    const { tagName } = target;
    let flag = true;
    const isInput = tagName === 'INPUT' && ![
        'checkbox',
        'radio',
        'range',
        'button',
        'file',
        'reset',
        'submit',
        'color'
    ].includes(target.type);
    // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>
    if (target.isContentEditable || (isInput || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {
        flag = false;
    }
    return flag;
}
// 判断摁下的键是否为某个键，返回true或者false
function isPressed(keyCode) {
    if (typeof keyCode === 'string') {
        keyCode = code(keyCode); // 转换成键码
    }
    return _downKeys.indexOf(keyCode) !== -1;
}
// 循环删除handlers中的所有 scope(范围)
function deleteScope(scope, newScope) {
    let handlers;
    let i;
    // 没有指定scope，获取scope
    if (!scope) scope = getScope();
    for(const key in _handlers){
        if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
            handlers = _handlers[key];
            for(i = 0; i < handlers.length;){
                if (handlers[i].scope === scope) {
                    const deleteItems = handlers.splice(i, 1);
                    deleteItems.forEach((_ref2)=>{
                        let { element } = _ref2;
                        return removeKeyEvent(element);
                    });
                } else {
                    i++;
                }
            }
        }
    }
    // 如果scope被删除，将scope重置为all
    if (getScope() === scope) setScope(newScope || 'all');
}
// 清除修饰键
function clearModifier(event) {
    let key = event.keyCode || event.which || event.charCode;
    const i = _downKeys.indexOf(key);
    // 从列表中清除按压过的键
    if (i >= 0) {
        _downKeys.splice(i, 1);
    }
    // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题
    if (event.key && event.key.toLowerCase() === 'meta') {
        _downKeys.splice(0, _downKeys.length);
    }
    // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除
    if (key === 93 || key === 224) key = 91;
    if (key in _mods) {
        _mods[key] = false;
        // 将修饰键重置为false
        for(const k in _modifier)if (_modifier[k] === key) hotkeys[k] = false;
    }
}
function unbind(keysInfo) {
    // unbind(), unbind all keys
    if (typeof keysInfo === 'undefined') {
        Object.keys(_handlers).forEach((key)=>{
            Array.isArray(_handlers[key]) && _handlers[key].forEach((info)=>eachUnbind(info));
            delete _handlers[key];
        });
        removeKeyEvent(null);
    } else if (Array.isArray(keysInfo)) {
        // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])
        keysInfo.forEach((info)=>{
            if (info.key) eachUnbind(info);
        });
    } else if (typeof keysInfo === 'object') {
        // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})
        if (keysInfo.key) eachUnbind(keysInfo);
    } else if (typeof keysInfo === 'string') {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
            args[_key - 1] = arguments[_key];
        }
        // support old method
        // eslint-disable-line
        let [scope, method] = args;
        if (typeof scope === 'function') {
            method = scope;
            scope = '';
        }
        eachUnbind({
            key: keysInfo,
            scope,
            method,
            splitKey: '+'
        });
    }
}
// 解除绑定某个范围的快捷键
const eachUnbind = (_ref3)=>{
    let { key, scope, method, splitKey = '+' } = _ref3;
    const multipleKeys = getKeys(key);
    multipleKeys.forEach((originKey)=>{
        const unbindKeys = originKey.split(splitKey);
        const len = unbindKeys.length;
        const lastKey = unbindKeys[len - 1];
        const keyCode = lastKey === '*' ? '*' : code(lastKey);
        if (!_handlers[keyCode]) return;
        // 判断是否传入范围，没有就获取范围
        if (!scope) scope = getScope();
        const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
        const unbindElements = [];
        _handlers[keyCode] = _handlers[keyCode].filter((record)=>{
            // 通过函数判断，是否解除绑定，函数相等直接返回
            const isMatchingMethod = method ? record.method === method : true;
            const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);
            if (isUnbind) unbindElements.push(record.element);
            return !isUnbind;
        });
        unbindElements.forEach((element)=>removeKeyEvent(element));
    });
};
// 对监听对应快捷键的回调函数进行处理
function eventHandler(event, handler, scope, element) {
    if (handler.element !== element) {
        return;
    }
    let modifiersMatch;
    // 看它是否在当前范围
    if (handler.scope === scope || handler.scope === 'all') {
        // 检查是否匹配修饰符（如果有返回true）
        modifiersMatch = handler.mods.length > 0;
        for(const y in _mods){
            if (Object.prototype.hasOwnProperty.call(_mods, y)) {
                if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
                    modifiersMatch = false;
                }
            }
        }
        // 调用处理程序，如果是修饰键不做处理
        if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {
            handler.keys = [];
            handler.keys = handler.keys.concat(_downKeys);
            if (handler.method(event, handler) === false) {
                if (event.preventDefault) event.preventDefault();
                else event.returnValue = false;
                if (event.stopPropagation) event.stopPropagation();
                if (event.cancelBubble) event.cancelBubble = true;
            }
        }
    }
}
// 处理keydown事件
function dispatch(event, element) {
    const asterisk = _handlers['*'];
    let key = event.keyCode || event.which || event.charCode;
    // 表单控件过滤 默认表单控件不触发快捷键
    if (!hotkeys.filter.call(this, event)) return;
    // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
    // Webkit左右 command 键值不一样
    if (key === 93 || key === 224) key = 91;
    /**
   * Collect bound keys
   * If an Input Method Editor is processing key input and the event is keydown, return 229.
   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229
   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
   */ if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);
    /**
   * Jest test cases are required.
   * ===============================
   */ [
        'ctrlKey',
        'altKey',
        'shiftKey',
        'metaKey'
    ].forEach((keyName)=>{
        const keyNum = modifierMap[keyName];
        if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
            _downKeys.push(keyNum);
        } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
            _downKeys.splice(_downKeys.indexOf(keyNum), 1);
        } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {
            /**
       * Fix if Command is pressed:
       * ===============================
       */ if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
                _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
            }
        }
    });
    /**
   * -------------------------------
   */ if (key in _mods) {
        _mods[key] = true;
        // 将特殊字符的key注册到 hotkeys 上
        for(const k in _modifier){
            if (_modifier[k] === key) hotkeys[k] = true;
        }
        if (!asterisk) return;
    }
    // 将 modifierMap 里面的修饰键绑定到 event 中
    for(const e in _mods){
        if (Object.prototype.hasOwnProperty.call(_mods, e)) {
            _mods[e] = event[modifierMap[e]];
        }
    }
    /**
   * https://github.com/jaywcjlove/hotkeys/pull/129
   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.
   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.
   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate
   */ if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {
        if (_downKeys.indexOf(17) === -1) {
            _downKeys.push(17);
        }
        if (_downKeys.indexOf(18) === -1) {
            _downKeys.push(18);
        }
        _mods[17] = true;
        _mods[18] = true;
    }
    // 获取范围 默认为 `all`
    const scope = getScope();
    // 对任何快捷键都需要做的处理
    if (asterisk) {
        for(let i = 0; i < asterisk.length; i++){
            if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {
                eventHandler(event, asterisk[i], scope, element);
            }
        }
    }
    // key 不在 _handlers 中返回
    if (!(key in _handlers)) return;
    const handlerKey = _handlers[key];
    const keyLen = handlerKey.length;
    for(let i = 0; i < keyLen; i++){
        if (event.type === 'keydown' && handlerKey[i].keydown || event.type === 'keyup' && handlerKey[i].keyup) {
            if (handlerKey[i].key) {
                const record = handlerKey[i];
                const { splitKey } = record;
                const keyShortcut = record.key.split(splitKey);
                const _downKeysCurrent = []; // 记录当前按键键值
                for(let a = 0; a < keyShortcut.length; a++){
                    _downKeysCurrent.push(code(keyShortcut[a]));
                }
                if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {
                    // 找到处理内容
                    eventHandler(event, record, scope, element);
                }
            }
        }
    }
}
function hotkeys(key, option, method) {
    _downKeys = [];
    const keys = getKeys(key); // 需要处理的快捷键列表
    let mods = [];
    let scope = 'all'; // scope默认为all，所有范围都有效
    let element = document; // 快捷键事件绑定节点
    let i = 0;
    let keyup = false;
    let keydown = true;
    let splitKey = '+';
    let capture = false;
    let single = false; // 单个callback
    // 对为设定范围的判断
    if (method === undefined && typeof option === 'function') {
        method = option;
    }
    if (Object.prototype.toString.call(option) === '[object Object]') {
        if (option.scope) scope = option.scope; // eslint-disable-line
        if (option.element) element = option.element; // eslint-disable-line
        if (option.keyup) keyup = option.keyup; // eslint-disable-line
        if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line
        if (option.capture !== undefined) capture = option.capture; // eslint-disable-line
        if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line
        if (option.single === true) single = true; // eslint-disable-line
    }
    if (typeof option === 'string') scope = option;
    // 如果只允许单个callback，先unbind
    if (single) unbind(key, scope);
    // 对于每个快捷键进行处理
    for(; i < keys.length; i++){
        key = keys[i].split(splitKey); // 按键列表
        mods = [];
        // 如果是组合快捷键取得组合快捷键
        if (key.length > 1) mods = getMods(_modifier, key);
        // 将非修饰键转化为键码
        key = key[key.length - 1];
        key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键
        // 判断key是否在_handlers中，不在就赋一个空数组
        if (!(key in _handlers)) _handlers[key] = [];
        _handlers[key].push({
            keyup,
            keydown,
            scope,
            mods,
            shortcut: keys[i],
            method,
            key: keys[i],
            splitKey,
            element
        });
    }
    // 在全局document上设置快捷键
    if (typeof element !== 'undefined' && window) {
        if (!elementEventMap.has(element)) {
            const keydownListener = function() {
                let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;
                return dispatch(event, element);
            };
            const keyupListenr = function() {
                let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;
                dispatch(event, element);
                clearModifier(event);
            };
            elementEventMap.set(element, {
                keydownListener,
                keyupListenr,
                capture
            });
            addEvent(element, 'keydown', keydownListener, capture);
            addEvent(element, 'keyup', keyupListenr, capture);
        }
        if (!winListendFocus) {
            const listener = ()=>{
                _downKeys = [];
            };
            winListendFocus = {
                listener,
                capture
            };
            addEvent(window, 'focus', listener, capture);
        }
    }
}
function trigger(shortcut) {
    let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
    Object.keys(_handlers).forEach((key)=>{
        const dataList = _handlers[key].filter((item)=>item.scope === scope && item.shortcut === shortcut);
        dataList.forEach((data)=>{
            if (data && data.method) {
                data.method();
            }
        });
    });
}
// 销毁事件,unbind之后判断element上是否还有键盘快捷键，如果没有移除监听
function removeKeyEvent(element) {
    const values = Object.values(_handlers).flat();
    const findindex = values.findIndex((_ref4)=>{
        let { element: el } = _ref4;
        return el === element;
    });
    if (findindex < 0) {
        const { keydownListener, keyupListenr, capture } = elementEventMap.get(element) || {};
        if (keydownListener && keyupListenr) {
            removeEvent(element, 'keyup', keyupListenr, capture);
            removeEvent(element, 'keydown', keydownListener, capture);
            elementEventMap.delete(element);
        }
    }
    if (values.length <= 0 || elementEventMap.size <= 0) {
        // 移除所有的元素上的监听
        const eventKeys = Object.keys(elementEventMap);
        eventKeys.forEach((el)=>{
            const { keydownListener, keyupListenr, capture } = elementEventMap.get(el) || {};
            if (keydownListener && keyupListenr) {
                removeEvent(el, 'keyup', keyupListenr, capture);
                removeEvent(el, 'keydown', keydownListener, capture);
                elementEventMap.delete(el);
            }
        });
        // 清空 elementEventMap
        elementEventMap.clear();
        // 清空 _handlers
        Object.keys(_handlers).forEach((key)=>delete _handlers[key]);
        // 移除window上的focus监听
        if (winListendFocus) {
            const { listener, capture } = winListendFocus;
            removeEvent(window, 'focus', listener, capture);
            winListendFocus = null;
        }
    }
}
const _api = {
    getPressedKeyString,
    setScope,
    getScope,
    deleteScope,
    getPressedKeyCodes,
    getAllKeyCodes,
    isPressed,
    filter,
    trigger,
    unbind,
    keyMap: _keyMap,
    modifier: _modifier,
    modifierMap
};
for(const a in _api){
    if (Object.prototype.hasOwnProperty.call(_api, a)) {
        hotkeys[a] = _api[a];
    }
}
if (typeof window !== 'undefined') {
    const _hotkeys = window.hotkeys;
    hotkeys.noConflict = (deep)=>{
        if (deep && window.hotkeys === hotkeys) {
            window.hotkeys = _hotkeys;
        }
        return hotkeys;
    };
    window.hotkeys = hotkeys;
}
;

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_esm__({
    "default": ()=>ArrowLeft
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const ArrowLeft = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])("ArrowLeft", [
    [
        "path",
        {
            d: "m12 19-7-7 7-7",
            key: "1l729n"
        }
    ],
    [
        "path",
        {
            d: "M19 12H5",
            key: "x3x0zl"
        }
    ]
]);
;
 //# sourceMappingURL=arrow-left.js.map

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-client] (ecmascript) <export default as ArrowLeftIcon>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname }) => (() => {
"use strict";

__turbopack_esm__({
    "ArrowLeftIcon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$left$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$left$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/icons/arrow-left.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/arrow-right.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_esm__({
    "default": ()=>ArrowRight
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const ArrowRight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])("ArrowRight", [
    [
        "path",
        {
            d: "M5 12h14",
            key: "1ays0h"
        }
    ],
    [
        "path",
        {
            d: "m12 5 7 7-7 7",
            key: "xquz4c"
        }
    ]
]);
;
 //# sourceMappingURL=arrow-right.js.map

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/arrow-right.js [app-client] (ecmascript) <export default as ArrowRightIcon>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname }) => (() => {
"use strict";

__turbopack_esm__({
    "ArrowRightIcon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$right$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$arrow$2d$right$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/icons/arrow-right.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/house.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_esm__({
    "default": ()=>House
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const House = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])("House", [
    [
        "path",
        {
            d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8",
            key: "5wwlr5"
        }
    ],
    [
        "path",
        {
            d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
            key: "1d0kgt"
        }
    ]
]);
;
 //# sourceMappingURL=house.js.map

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/house.js [app-client] (ecmascript) <export default as HomeIcon>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname }) => (() => {
"use strict";

__turbopack_esm__({
    "HomeIcon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$house$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$house$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/icons/house.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/link.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */ __turbopack_esm__({
    "default": ()=>Link
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/createLucideIcon.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
const Link = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$createLucideIcon$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])("Link", [
    [
        "path",
        {
            d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71",
            key: "1cjeqo"
        }
    ],
    [
        "path",
        {
            d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71",
            key: "19qd67"
        }
    ]
]);
;
 //# sourceMappingURL=link.js.map

})()),
"[project]/node_modules/lucide-react/dist/esm/icons/link.js [app-client] (ecmascript) <export default as LinkIcon>": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname }) => (() => {
"use strict";

__turbopack_esm__({
    "LinkIcon": ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$link$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lucide$2d$react$2f$dist$2f$esm$2f$icons$2f$link$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/lucide-react/dist/esm/icons/link.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";

})()),
"[project]/node_modules/next/navigation.js [app-client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

module.exports = __turbopack_require__("[project]/node_modules/next/dist/client/components/navigation.js [app-client] (ecmascript)");

}.call(this) }),
"[project]/node_modules/@curiousleaf/utils/dist/index.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

// node_modules/scule/dist/index.mjs
__turbopack_esm__({
    "addHttp": ()=>addHttp,
    "camelCase": ()=>camelCase,
    "color": ()=>color,
    "convertNewlines": ()=>convertNewlines,
    "equalColorObjects": ()=>equalColorObjects,
    "equalColorString": ()=>equalColorString,
    "equalHex": ()=>equalHex,
    "flatCase": ()=>flatCase,
    "formatBytes": ()=>formatBytes,
    "formatCurrency": ()=>formatCurrency,
    "formatDate": ()=>formatDate,
    "formatDateOrTime": ()=>formatDateOrTime,
    "formatDateTime": ()=>formatDateTime,
    "formatIntervalAmount": ()=>formatIntervalAmount,
    "formatMimeType": ()=>formatMimeType,
    "formatNumber": ()=>formatNumber,
    "formatTime": ()=>formatTime,
    "formatToDecimals": ()=>formatToDecimals,
    "getColorObject": ()=>getColorObject,
    "getContrastingColor": ()=>getContrastingColor,
    "getCurrentPage": ()=>getCurrentPage,
    "getErrorMessage": ()=>getErrorMessage,
    "getExcerpt": ()=>getExcerpt,
    "getInitials": ()=>getInitials,
    "getPageLink": ()=>getPageLink,
    "getPageParams": ()=>getPageParams,
    "getRandomColor": ()=>getRandomColor,
    "getRandomElement": ()=>getRandomElement,
    "getRandomNumber": ()=>getRandomNumber,
    "getRandomProperty": ()=>getRandomProperty,
    "getRandomString": ()=>getRandomString,
    "getReadTime": ()=>getReadTime,
    "getSearchParams": ()=>getSearchParams,
    "getShortcutLabel": ()=>getShortcutLabel,
    "hexToHsva": ()=>hexToHsva,
    "hexToRgba": ()=>hexToRgba,
    "hslStringToHsla": ()=>hslStringToHsla,
    "hslStringToHsva": ()=>hslStringToHsva,
    "hslaStringToHsva": ()=>hslaStringToHsva,
    "hslaToHsl": ()=>hslaToHsl,
    "hslaToHsva": ()=>hslaToHsva,
    "hsvStringToHsva": ()=>hsvStringToHsva,
    "hsvaStringToHsva": ()=>hsvaStringToHsva,
    "hsvaToHex": ()=>hsvaToHex,
    "hsvaToHexa": ()=>hsvaToHexa,
    "hsvaToHslString": ()=>hsvaToHslString,
    "hsvaToHsla": ()=>hsvaToHsla,
    "hsvaToHslaString": ()=>hsvaToHslaString,
    "hsvaToHsv": ()=>hsvaToHsv,
    "hsvaToHsvString": ()=>hsvaToHsvString,
    "hsvaToHsvaString": ()=>hsvaToHsvaString,
    "hsvaToRgbString": ()=>hsvaToRgbString,
    "hsvaToRgba": ()=>hsvaToRgba,
    "hsvaToRgbaString": ()=>hsvaToRgbaString,
    "isCuid": ()=>isCuid,
    "isEmptyObject": ()=>isEmptyObject,
    "isErrorWithMessage": ()=>isErrorWithMessage,
    "isExternalLink": ()=>isExternalLink,
    "isLightColor": ()=>isLightColor,
    "isTruthy": ()=>isTruthy,
    "isUppercase": ()=>isUppercase,
    "kebabCase": ()=>kebabCase,
    "keepNumberInRange": ()=>keepNumberInRange,
    "lowerFirst": ()=>lowerFirst,
    "maybeParseJson": ()=>maybeParseJson,
    "maybeStringifyJson": ()=>maybeStringifyJson,
    "parseHue": ()=>parseHue,
    "parseNumericValue": ()=>parseNumericValue,
    "pascalCase": ()=>pascalCase,
    "preciseRound": ()=>preciseRound,
    "publish": ()=>publish,
    "publishEscape": ()=>publishEscape,
    "range": ()=>range,
    "removeHttp": ()=>removeHttp,
    "removeTrailingSlash": ()=>removeTrailingSlash,
    "rgbStringToHsva": ()=>rgbStringToHsva,
    "rgbaStringToHsva": ()=>rgbaStringToHsva,
    "rgbaToHex": ()=>rgbaToHex,
    "rgbaToHexa": ()=>rgbaToHexa,
    "rgbaToHsva": ()=>rgbaToHsva,
    "rgbaToRgb": ()=>rgbaToRgb,
    "setInputValue": ()=>setInputValue,
    "sleep": ()=>sleep,
    "slugify": ()=>slugify2,
    "snakeCase": ()=>snakeCase,
    "sortObject": ()=>sortObject,
    "sortObjectKeys": ()=>sortObjectKeys,
    "splitArrayChunks": ()=>splitArrayChunks,
    "splitByCase": ()=>splitByCase,
    "stripHtml": ()=>stripHtml,
    "subscribe": ()=>subscribe,
    "titleCase": ()=>titleCase,
    "toBase64": ()=>toBase64,
    "toErrorWithMessage": ()=>toErrorWithMessage,
    "trainCase": ()=>trainCase,
    "unsubscribe": ()=>unsubscribe,
    "upperFirst": ()=>upperFirst,
    "validHex": ()=>validHex
});
function isUppercase(char = "") {
    if (NUMBER_CHAR_RE.test(char)) {
        return;
    }
    return char !== char.toLowerCase();
}
function splitByCase(str, separators) {
    const splitters = separators ?? STR_SPLITTERS;
    const parts = [];
    if (!str || typeof str !== "string") {
        return parts;
    }
    let buff = "";
    let previousUpper;
    let previousSplitter;
    for (const char of str){
        const isSplitter = splitters.includes(char);
        if (isSplitter === true) {
            parts.push(buff);
            buff = "";
            previousUpper = undefined;
            continue;
        }
        const isUpper = isUppercase(char);
        if (previousSplitter === false) {
            if (previousUpper === false && isUpper === true) {
                parts.push(buff);
                buff = char;
                previousUpper = isUpper;
                continue;
            }
            if (previousUpper === true && isUpper === false && buff.length > 1) {
                const lastChar = buff.at(-1);
                parts.push(buff.slice(0, Math.max(0, buff.length - 1)));
                buff = lastChar + char;
                previousUpper = isUpper;
                continue;
            }
        }
        buff += char;
        previousUpper = isUpper;
        previousSplitter = isSplitter;
    }
    parts.push(buff);
    return parts;
}
function upperFirst(str) {
    return str ? str[0].toUpperCase() + str.slice(1) : "";
}
function lowerFirst(str) {
    return str ? str[0].toLowerCase() + str.slice(1) : "";
}
function pascalCase(str, opts) {
    return str ? (Array.isArray(str) ? str : splitByCase(str)).map((p)=>upperFirst(opts?.normalize ? p.toLowerCase() : p)).join("") : "";
}
function camelCase(str, opts) {
    return lowerFirst(pascalCase(str || "", opts));
}
function kebabCase(str, joiner) {
    return str ? (Array.isArray(str) ? str : splitByCase(str)).map((p)=>p.toLowerCase()).join(joiner ?? "-") : "";
}
function snakeCase(str) {
    return kebabCase(str || "", "_");
}
function flatCase(str) {
    return kebabCase(str || "", "");
}
function trainCase(str, opts) {
    return (Array.isArray(str) ? str : splitByCase(str)).filter(Boolean).map((p)=>upperFirst(opts?.normalize ? p.toLowerCase() : p)).join("-");
}
function titleCase(str, opts) {
    return (Array.isArray(str) ? str : splitByCase(str)).filter(Boolean).map((p)=>titleCaseExceptions.test(p) ? p.toLowerCase() : upperFirst(opts?.normalize ? p.toLowerCase() : p)).join(" ");
}
var NUMBER_CHAR_RE = /\d/;
var STR_SPLITTERS = [
    "-",
    "_",
    "/",
    "."
];
var titleCaseExceptions = /^(a|an|and|as|at|but|by|for|if|in|is|nor|of|on|or|the|to|with)$/i;
// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
// node_modules/@uiw/color-convert/esm/index.js
var RGB_MAX = 255;
var HUE_MAX = 360;
var SV_MAX = 100;
var rgbaToHsva = (_ref)=>{
    var { r, g, b, a } = _ref;
    var max = Math.max(r, g, b);
    var delta = max - Math.min(r, g, b);
    var hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;
    return {
        h: 60 * (hh < 0 ? hh + 6 : hh),
        s: max ? delta / max * SV_MAX : 0,
        v: max / RGB_MAX * SV_MAX,
        a
    };
};
var hsvaToHslString = (hsva)=>{
    var { h, s, l } = hsvaToHsla(hsva);
    return "hsl(" + h + ", " + Math.round(s) + "%, " + Math.round(l) + "%)";
};
var hsvaToHsvString = (_ref2)=>{
    var { h, s, v } = _ref2;
    return "hsv(" + h + ", " + s + "%, " + v + "%)";
};
var hsvaToHsvaString = (_ref3)=>{
    var { h, s, v, a } = _ref3;
    return "hsva(" + h + ", " + s + "%, " + v + "%, " + a + ")";
};
var hsvaToHslaString = (hsva)=>{
    var { h, s, l, a } = hsvaToHsla(hsva);
    return "hsla(" + h + ", " + s + "%, " + l + "%, " + a + ")";
};
var hslStringToHsla = (str)=>{
    var [h, s, l, a] = (str.match(/\d+/g) || []).map(Number);
    return {
        h,
        s,
        l,
        a
    };
};
var hslaStringToHsva = (hslString)=>{
    var matcher = /hsla?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
    var match = matcher.exec(hslString);
    if (!match) return {
        h: 0,
        s: 0,
        v: 0,
        a: 1
    };
    return hslaToHsva({
        h: parseHue(match[1], match[2]),
        s: Number(match[3]),
        l: Number(match[4]),
        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)
    });
};
var hslStringToHsva = hslaStringToHsva;
var hslaToHsva = (_ref4)=>{
    var { h, s, l, a } = _ref4;
    s *= (l < 50 ? l : SV_MAX - l) / SV_MAX;
    return {
        h,
        s: s > 0 ? 2 * s / (l + s) * SV_MAX : 0,
        v: l + s,
        a
    };
};
var hsvaToHsla = (_ref5)=>{
    var { h, s, v, a } = _ref5;
    var hh = (200 - s) * v / SV_MAX;
    return {
        h,
        s: hh > 0 && hh < 200 ? s * v / SV_MAX / (hh <= SV_MAX ? hh : 200 - hh) * SV_MAX : 0,
        l: hh / 2,
        a
    };
};
var hsvaStringToHsva = (hsvString)=>{
    var matcher = /hsva?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
    var match = matcher.exec(hsvString);
    if (!match) return {
        h: 0,
        s: 0,
        v: 0,
        a: 1
    };
    return {
        h: parseHue(match[1], match[2]),
        s: Number(match[3]),
        v: Number(match[4]),
        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? SV_MAX : 1)
    };
};
var angleUnits = {
    grad: HUE_MAX / 400,
    turn: HUE_MAX,
    rad: HUE_MAX / (Math.PI * 2)
};
var parseHue = function parseHue2(value, unit) {
    if (unit === undefined) {
        unit = "deg";
    }
    return Number(value) * (angleUnits[unit] || 1);
};
var hsvStringToHsva = hsvaStringToHsva;
var rgbaStringToHsva = (rgbaString)=>{
    var matcher = /rgba?\(?\s*(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
    var match = matcher.exec(rgbaString);
    if (!match) return {
        h: 0,
        s: 0,
        v: 0,
        a: 1
    };
    return rgbaToHsva({
        r: Number(match[1]) / (match[2] ? SV_MAX / RGB_MAX : 1),
        g: Number(match[3]) / (match[4] ? SV_MAX / RGB_MAX : 1),
        b: Number(match[5]) / (match[6] ? SV_MAX / RGB_MAX : 1),
        a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? SV_MAX : 1)
    });
};
var rgbStringToHsva = rgbaStringToHsva;
var rgbaToHex = (_ref6)=>{
    var { r, g, b } = _ref6;
    var bin = r << 16 | g << 8 | b;
    return "#" + ((h)=>new Array(7 - h.length).join("0") + h)(bin.toString(16));
};
var rgbaToHexa = (_ref7)=>{
    var { r, g, b, a } = _ref7;
    var alpha = typeof a === "number" && (a * 255 | 1 << 8).toString(16).slice(1);
    return "" + rgbaToHex({
        r,
        g,
        b,
        a
    }) + (alpha ? alpha : "");
};
var hexToHsva = (hex)=>rgbaToHsva(hexToRgba(hex));
var hexToRgba = (hex)=>{
    var htemp = hex.replace("#", "");
    if (/^#?/.test(hex) && htemp.length === 3) {
        hex = "#" + htemp.charAt(0) + htemp.charAt(0) + htemp.charAt(1) + htemp.charAt(1) + htemp.charAt(2) + htemp.charAt(2);
    }
    var reg = new RegExp("[A-Za-z0-9]{2}", "g");
    var [r, g, b = 0, a] = hex.match(reg).map((v)=>parseInt(v, 16));
    return {
        r,
        g,
        b,
        a: (a != null ? a : 255) / RGB_MAX
    };
};
var hsvaToRgba = (_ref8)=>{
    var { h, s, v, a } = _ref8;
    var _h = h / 60, _s = s / SV_MAX, _v = v / SV_MAX, hi = Math.floor(_h) % 6;
    var f = _h - Math.floor(_h), _p = RGB_MAX * _v * (1 - _s), _q = RGB_MAX * _v * (1 - _s * f), _t = RGB_MAX * _v * (1 - _s * (1 - f));
    _v *= RGB_MAX;
    var rgba = {};
    switch(hi){
        case 0:
            rgba.r = _v;
            rgba.g = _t;
            rgba.b = _p;
            break;
        case 1:
            rgba.r = _q;
            rgba.g = _v;
            rgba.b = _p;
            break;
        case 2:
            rgba.r = _p;
            rgba.g = _v;
            rgba.b = _t;
            break;
        case 3:
            rgba.r = _p;
            rgba.g = _q;
            rgba.b = _v;
            break;
        case 4:
            rgba.r = _t;
            rgba.g = _p;
            rgba.b = _v;
            break;
        case 5:
            rgba.r = _v;
            rgba.g = _p;
            rgba.b = _q;
            break;
    }
    rgba.r = Math.round(rgba.r);
    rgba.g = Math.round(rgba.g);
    rgba.b = Math.round(rgba.b);
    return _extends({}, rgba, {
        a
    });
};
var hsvaToRgbString = (hsva)=>{
    var { r, g, b } = hsvaToRgba(hsva);
    return "rgb(" + r + ", " + g + ", " + b + ")";
};
var hsvaToRgbaString = (hsva)=>{
    var { r, g, b, a } = hsvaToRgba(hsva);
    return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
};
var rgbaToRgb = (_ref9)=>{
    var { r, g, b } = _ref9;
    return {
        r,
        g,
        b
    };
};
var hslaToHsl = (_ref10)=>{
    var { h, s, l } = _ref10;
    return {
        h,
        s,
        l
    };
};
var hsvaToHex = (hsva)=>rgbaToHex(hsvaToRgba(hsva));
var hsvaToHexa = (hsva)=>rgbaToHexa(hsvaToRgba(hsva));
var hsvaToHsv = (_ref11)=>{
    var { h, s, v } = _ref11;
    return {
        h,
        s,
        v
    };
};
var color = (str)=>{
    var rgb;
    var hsl;
    var hsv;
    var rgba;
    var hsla;
    var hsva;
    var hex;
    var hexa;
    if (typeof str === "string" && validHex(str)) {
        hsva = hexToHsva(str);
        hex = str;
    } else if (typeof str !== "string") {
        hsva = str;
    }
    if (hsva) {
        hsv = hsvaToHsv(hsva);
        hsla = hsvaToHsla(hsva);
        rgba = hsvaToRgba(hsva);
        hexa = rgbaToHexa(rgba);
        hex = hsvaToHex(hsva);
        hsl = hslaToHsl(hsla);
        rgb = rgbaToRgb(rgba);
    }
    return {
        rgb,
        hsl,
        hsv,
        rgba,
        hsla,
        hsva,
        hex,
        hexa
    };
};
var getContrastingColor = (str)=>{
    if (!str) {
        return "#ffffff";
    }
    var col = color(str);
    var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
    return yiq >= 128 ? "#000000" : "#ffffff";
};
var equalColorObjects = (first, second)=>{
    if (first === second) return true;
    for(var prop in first){
        if (first[prop] !== second[prop]) return false;
    }
    return true;
};
var equalColorString = (first, second)=>{
    return first.replace(/\s/g, "") === second.replace(/\s/g, "");
};
var equalHex = (first, second)=>{
    if (first.toLowerCase() === second.toLowerCase()) return true;
    return equalColorObjects(hexToRgba(first), hexToRgba(second));
};
var validHex = (hex)=>/^#?([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);
// src/colors/colors.ts
var isLightColor = (hexa)=>{
    const { r, g, b, a } = hexToRgba(hexa);
    const brightness = r * 0.299 + g * 0.587 + b * 0.114 + (1 - a) * 255;
    return brightness > 186;
};
var getColorObject = (str)=>{
    return color(str);
};
// src/errors/errors.ts
var isErrorWithMessage = (error)=>{
    return typeof error === "object" && error !== null && "message" in error && typeof error.message === "string";
};
var toErrorWithMessage = (maybeError)=>{
    if (isErrorWithMessage(maybeError)) return maybeError;
    try {
        return new Error(JSON.stringify(maybeError));
    } catch  {
        return new Error(String(maybeError));
    }
};
var getErrorMessage = (error)=>{
    return toErrorWithMessage(error).message;
};
// src/events/events.ts
var subscribe = (eventName, listener)=>{
    document.addEventListener(eventName, listener);
};
var unsubscribe = (eventName, listener)=>{
    document.removeEventListener(eventName, listener);
};
var publish = (eventName, data)=>{
    const event = new CustomEvent(eventName, {
        detail: data
    });
    document.dispatchEvent(event);
};
var publishEscape = ()=>{
    const event = new KeyboardEvent("keydown", {
        key: "Escape"
    });
    document.dispatchEvent(event);
};
// src/format/format.ts
var formatNumber = (number, notation = "compact", locale = "en-US")=>{
    const formatter = new Intl.NumberFormat(locale, {
        notation
    });
    return formatter.format(number);
};
var formatCurrency = (amount, currency = "USD")=>{
    const formatter = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency
    });
    return formatter.format(amount).replace(/\D00(?=\D*$)/, "");
};
var formatIntervalAmount = (amount, interval = "month")=>{
    return formatToDecimals(amount / (interval === "year" ? 12 : 1), 2);
};
var formatToDecimals = (number, precision = 0)=>{
    return number.toFixed(precision < 0 ? 0 : precision).replace(/\.0+$/, "");
};
var formatBytes = (bytes, precision = 0)=>{
    if (bytes === 0) {
        return "0 Bytes";
    }
    const k = 1024;
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    const size = formatToDecimals(bytes / k ** i, precision);
    const sizes = [
        "Bytes",
        "KB",
        "MB",
        "GB",
        "TB",
        "PB",
        "EB",
        "ZB",
        "YB"
    ];
    return `${size} ${sizes[i]}`;
};
var formatMimeType = (mimeType)=>{
    const [, subtype] = mimeType.split("/");
    let type;
    switch(subtype){
        case "*":
            return;
        default:
            type = subtype;
    }
    return type?.toUpperCase();
};
// node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string) {
    if (typeof string !== "string") {
        throw new TypeError("Expected a string");
    }
    return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
// node_modules/@sindresorhus/transliterate/replacements.js
var replacements = [
    [
        "\xDF",
        "ss"
    ],
    [
        "\u1E9E",
        "Ss"
    ],
    [
        "\xE4",
        "ae"
    ],
    [
        "\xC4",
        "Ae"
    ],
    [
        "\xF6",
        "oe"
    ],
    [
        "\xD6",
        "Oe"
    ],
    [
        "\xFC",
        "ue"
    ],
    [
        "\xDC",
        "Ue"
    ],
    [
        "\xC0",
        "A"
    ],
    [
        "\xC1",
        "A"
    ],
    [
        "\xC2",
        "A"
    ],
    [
        "\xC3",
        "A"
    ],
    [
        "\xC4",
        "Ae"
    ],
    [
        "\xC5",
        "A"
    ],
    [
        "\xC6",
        "AE"
    ],
    [
        "\xC7",
        "C"
    ],
    [
        "\xC8",
        "E"
    ],
    [
        "\xC9",
        "E"
    ],
    [
        "\xCA",
        "E"
    ],
    [
        "\xCB",
        "E"
    ],
    [
        "\xCC",
        "I"
    ],
    [
        "\xCD",
        "I"
    ],
    [
        "\xCE",
        "I"
    ],
    [
        "\xCF",
        "I"
    ],
    [
        "\xD0",
        "D"
    ],
    [
        "\xD1",
        "N"
    ],
    [
        "\xD2",
        "O"
    ],
    [
        "\xD3",
        "O"
    ],
    [
        "\xD4",
        "O"
    ],
    [
        "\xD5",
        "O"
    ],
    [
        "\xD6",
        "Oe"
    ],
    [
        "\u0150",
        "O"
    ],
    [
        "\xD8",
        "O"
    ],
    [
        "\xD9",
        "U"
    ],
    [
        "\xDA",
        "U"
    ],
    [
        "\xDB",
        "U"
    ],
    [
        "\xDC",
        "Ue"
    ],
    [
        "\u0170",
        "U"
    ],
    [
        "\xDD",
        "Y"
    ],
    [
        "\xDE",
        "TH"
    ],
    [
        "\xDF",
        "ss"
    ],
    [
        "\xE0",
        "a"
    ],
    [
        "\xE1",
        "a"
    ],
    [
        "\xE2",
        "a"
    ],
    [
        "\xE3",
        "a"
    ],
    [
        "\xE4",
        "ae"
    ],
    [
        "\xE5",
        "a"
    ],
    [
        "\xE6",
        "ae"
    ],
    [
        "\xE7",
        "c"
    ],
    [
        "\xE8",
        "e"
    ],
    [
        "\xE9",
        "e"
    ],
    [
        "\xEA",
        "e"
    ],
    [
        "\xEB",
        "e"
    ],
    [
        "\xEC",
        "i"
    ],
    [
        "\xED",
        "i"
    ],
    [
        "\xEE",
        "i"
    ],
    [
        "\xEF",
        "i"
    ],
    [
        "\xF0",
        "d"
    ],
    [
        "\xF1",
        "n"
    ],
    [
        "\xF2",
        "o"
    ],
    [
        "\xF3",
        "o"
    ],
    [
        "\xF4",
        "o"
    ],
    [
        "\xF5",
        "o"
    ],
    [
        "\xF6",
        "oe"
    ],
    [
        "\u0151",
        "o"
    ],
    [
        "\xF8",
        "o"
    ],
    [
        "\xF9",
        "u"
    ],
    [
        "\xFA",
        "u"
    ],
    [
        "\xFB",
        "u"
    ],
    [
        "\xFC",
        "ue"
    ],
    [
        "\u0171",
        "u"
    ],
    [
        "\xFD",
        "y"
    ],
    [
        "\xFE",
        "th"
    ],
    [
        "\xFF",
        "y"
    ],
    [
        "\u1E9E",
        "SS"
    ],
    [
        "\xE0",
        "a"
    ],
    [
        "\xC0",
        "A"
    ],
    [
        "\xE1",
        "a"
    ],
    [
        "\xC1",
        "A"
    ],
    [
        "\xE2",
        "a"
    ],
    [
        "\xC2",
        "A"
    ],
    [
        "\xE3",
        "a"
    ],
    [
        "\xC3",
        "A"
    ],
    [
        "\xE8",
        "e"
    ],
    [
        "\xC8",
        "E"
    ],
    [
        "\xE9",
        "e"
    ],
    [
        "\xC9",
        "E"
    ],
    [
        "\xEA",
        "e"
    ],
    [
        "\xCA",
        "E"
    ],
    [
        "\xEC",
        "i"
    ],
    [
        "\xCC",
        "I"
    ],
    [
        "\xED",
        "i"
    ],
    [
        "\xCD",
        "I"
    ],
    [
        "\xF2",
        "o"
    ],
    [
        "\xD2",
        "O"
    ],
    [
        "\xF3",
        "o"
    ],
    [
        "\xD3",
        "O"
    ],
    [
        "\xF4",
        "o"
    ],
    [
        "\xD4",
        "O"
    ],
    [
        "\xF5",
        "o"
    ],
    [
        "\xD5",
        "O"
    ],
    [
        "\xF9",
        "u"
    ],
    [
        "\xD9",
        "U"
    ],
    [
        "\xFA",
        "u"
    ],
    [
        "\xDA",
        "U"
    ],
    [
        "\xFD",
        "y"
    ],
    [
        "\xDD",
        "Y"
    ],
    [
        "\u0103",
        "a"
    ],
    [
        "\u0102",
        "A"
    ],
    [
        "\u0110",
        "D"
    ],
    [
        "\u0111",
        "d"
    ],
    [
        "\u0129",
        "i"
    ],
    [
        "\u0128",
        "I"
    ],
    [
        "\u0169",
        "u"
    ],
    [
        "\u0168",
        "U"
    ],
    [
        "\u01A1",
        "o"
    ],
    [
        "\u01A0",
        "O"
    ],
    [
        "\u01B0",
        "u"
    ],
    [
        "\u01AF",
        "U"
    ],
    [
        "\u1EA1",
        "a"
    ],
    [
        "\u1EA0",
        "A"
    ],
    [
        "\u1EA3",
        "a"
    ],
    [
        "\u1EA2",
        "A"
    ],
    [
        "\u1EA5",
        "a"
    ],
    [
        "\u1EA4",
        "A"
    ],
    [
        "\u1EA7",
        "a"
    ],
    [
        "\u1EA6",
        "A"
    ],
    [
        "\u1EA9",
        "a"
    ],
    [
        "\u1EA8",
        "A"
    ],
    [
        "\u1EAB",
        "a"
    ],
    [
        "\u1EAA",
        "A"
    ],
    [
        "\u1EAD",
        "a"
    ],
    [
        "\u1EAC",
        "A"
    ],
    [
        "\u1EAF",
        "a"
    ],
    [
        "\u1EAE",
        "A"
    ],
    [
        "\u1EB1",
        "a"
    ],
    [
        "\u1EB0",
        "A"
    ],
    [
        "\u1EB3",
        "a"
    ],
    [
        "\u1EB2",
        "A"
    ],
    [
        "\u1EB5",
        "a"
    ],
    [
        "\u1EB4",
        "A"
    ],
    [
        "\u1EB7",
        "a"
    ],
    [
        "\u1EB6",
        "A"
    ],
    [
        "\u1EB9",
        "e"
    ],
    [
        "\u1EB8",
        "E"
    ],
    [
        "\u1EBB",
        "e"
    ],
    [
        "\u1EBA",
        "E"
    ],
    [
        "\u1EBD",
        "e"
    ],
    [
        "\u1EBC",
        "E"
    ],
    [
        "\u1EBF",
        "e"
    ],
    [
        "\u1EBE",
        "E"
    ],
    [
        "\u1EC1",
        "e"
    ],
    [
        "\u1EC0",
        "E"
    ],
    [
        "\u1EC3",
        "e"
    ],
    [
        "\u1EC2",
        "E"
    ],
    [
        "\u1EC5",
        "e"
    ],
    [
        "\u1EC4",
        "E"
    ],
    [
        "\u1EC7",
        "e"
    ],
    [
        "\u1EC6",
        "E"
    ],
    [
        "\u1EC9",
        "i"
    ],
    [
        "\u1EC8",
        "I"
    ],
    [
        "\u1ECB",
        "i"
    ],
    [
        "\u1ECA",
        "I"
    ],
    [
        "\u1ECD",
        "o"
    ],
    [
        "\u1ECC",
        "O"
    ],
    [
        "\u1ECF",
        "o"
    ],
    [
        "\u1ECE",
        "O"
    ],
    [
        "\u1ED1",
        "o"
    ],
    [
        "\u1ED0",
        "O"
    ],
    [
        "\u1ED3",
        "o"
    ],
    [
        "\u1ED2",
        "O"
    ],
    [
        "\u1ED5",
        "o"
    ],
    [
        "\u1ED4",
        "O"
    ],
    [
        "\u1ED7",
        "o"
    ],
    [
        "\u1ED6",
        "O"
    ],
    [
        "\u1ED9",
        "o"
    ],
    [
        "\u1ED8",
        "O"
    ],
    [
        "\u1EDB",
        "o"
    ],
    [
        "\u1EDA",
        "O"
    ],
    [
        "\u1EDD",
        "o"
    ],
    [
        "\u1EDC",
        "O"
    ],
    [
        "\u1EDF",
        "o"
    ],
    [
        "\u1EDE",
        "O"
    ],
    [
        "\u1EE1",
        "o"
    ],
    [
        "\u1EE0",
        "O"
    ],
    [
        "\u1EE3",
        "o"
    ],
    [
        "\u1EE2",
        "O"
    ],
    [
        "\u1EE5",
        "u"
    ],
    [
        "\u1EE4",
        "U"
    ],
    [
        "\u1EE7",
        "u"
    ],
    [
        "\u1EE6",
        "U"
    ],
    [
        "\u1EE9",
        "u"
    ],
    [
        "\u1EE8",
        "U"
    ],
    [
        "\u1EEB",
        "u"
    ],
    [
        "\u1EEA",
        "U"
    ],
    [
        "\u1EED",
        "u"
    ],
    [
        "\u1EEC",
        "U"
    ],
    [
        "\u1EEF",
        "u"
    ],
    [
        "\u1EEE",
        "U"
    ],
    [
        "\u1EF1",
        "u"
    ],
    [
        "\u1EF0",
        "U"
    ],
    [
        "\u1EF3",
        "y"
    ],
    [
        "\u1EF2",
        "Y"
    ],
    [
        "\u1EF5",
        "y"
    ],
    [
        "\u1EF4",
        "Y"
    ],
    [
        "\u1EF7",
        "y"
    ],
    [
        "\u1EF6",
        "Y"
    ],
    [
        "\u1EF9",
        "y"
    ],
    [
        "\u1EF8",
        "Y"
    ],
    [
        "\u0621",
        "e"
    ],
    [
        "\u0622",
        "a"
    ],
    [
        "\u0623",
        "a"
    ],
    [
        "\u0624",
        "w"
    ],
    [
        "\u0625",
        "i"
    ],
    [
        "\u0626",
        "y"
    ],
    [
        "\u0627",
        "a"
    ],
    [
        "\u0628",
        "b"
    ],
    [
        "\u0629",
        "t"
    ],
    [
        "\u062A",
        "t"
    ],
    [
        "\u062B",
        "th"
    ],
    [
        "\u062C",
        "j"
    ],
    [
        "\u062D",
        "h"
    ],
    [
        "\u062E",
        "kh"
    ],
    [
        "\u062F",
        "d"
    ],
    [
        "\u0630",
        "dh"
    ],
    [
        "\u0631",
        "r"
    ],
    [
        "\u0632",
        "z"
    ],
    [
        "\u0633",
        "s"
    ],
    [
        "\u0634",
        "sh"
    ],
    [
        "\u0635",
        "s"
    ],
    [
        "\u0636",
        "d"
    ],
    [
        "\u0637",
        "t"
    ],
    [
        "\u0638",
        "z"
    ],
    [
        "\u0639",
        "e"
    ],
    [
        "\u063A",
        "gh"
    ],
    [
        "\u0640",
        "_"
    ],
    [
        "\u0641",
        "f"
    ],
    [
        "\u0642",
        "q"
    ],
    [
        "\u0643",
        "k"
    ],
    [
        "\u0644",
        "l"
    ],
    [
        "\u0645",
        "m"
    ],
    [
        "\u0646",
        "n"
    ],
    [
        "\u0647",
        "h"
    ],
    [
        "\u0648",
        "w"
    ],
    [
        "\u0649",
        "a"
    ],
    [
        "\u064A",
        "y"
    ],
    [
        "\u064E\u200E",
        "a"
    ],
    [
        "\u064F",
        "u"
    ],
    [
        "\u0650\u200E",
        "i"
    ],
    [
        "\u0660",
        "0"
    ],
    [
        "\u0661",
        "1"
    ],
    [
        "\u0662",
        "2"
    ],
    [
        "\u0663",
        "3"
    ],
    [
        "\u0664",
        "4"
    ],
    [
        "\u0665",
        "5"
    ],
    [
        "\u0666",
        "6"
    ],
    [
        "\u0667",
        "7"
    ],
    [
        "\u0668",
        "8"
    ],
    [
        "\u0669",
        "9"
    ],
    [
        "\u0686",
        "ch"
    ],
    [
        "\u06A9",
        "k"
    ],
    [
        "\u06AF",
        "g"
    ],
    [
        "\u067E",
        "p"
    ],
    [
        "\u0698",
        "zh"
    ],
    [
        "\u06CC",
        "y"
    ],
    [
        "\u06F0",
        "0"
    ],
    [
        "\u06F1",
        "1"
    ],
    [
        "\u06F2",
        "2"
    ],
    [
        "\u06F3",
        "3"
    ],
    [
        "\u06F4",
        "4"
    ],
    [
        "\u06F5",
        "5"
    ],
    [
        "\u06F6",
        "6"
    ],
    [
        "\u06F7",
        "7"
    ],
    [
        "\u06F8",
        "8"
    ],
    [
        "\u06F9",
        "9"
    ],
    [
        "\u067C",
        "p"
    ],
    [
        "\u0681",
        "z"
    ],
    [
        "\u0685",
        "c"
    ],
    [
        "\u0689",
        "d"
    ],
    [
        "\uFEAB",
        "d"
    ],
    [
        "\uFEAD",
        "r"
    ],
    [
        "\u0693",
        "r"
    ],
    [
        "\uFEAF",
        "z"
    ],
    [
        "\u0696",
        "g"
    ],
    [
        "\u069A",
        "x"
    ],
    [
        "\u06AB",
        "g"
    ],
    [
        "\u06BC",
        "n"
    ],
    [
        "\u06C0",
        "e"
    ],
    [
        "\u06D0",
        "e"
    ],
    [
        "\u06CD",
        "ai"
    ],
    [
        "\u0679",
        "t"
    ],
    [
        "\u0688",
        "d"
    ],
    [
        "\u0691",
        "r"
    ],
    [
        "\u06BA",
        "n"
    ],
    [
        "\u06C1",
        "h"
    ],
    [
        "\u06BE",
        "h"
    ],
    [
        "\u06D2",
        "e"
    ],
    [
        "\u0410",
        "A"
    ],
    [
        "\u0430",
        "a"
    ],
    [
        "\u0411",
        "B"
    ],
    [
        "\u0431",
        "b"
    ],
    [
        "\u0412",
        "V"
    ],
    [
        "\u0432",
        "v"
    ],
    [
        "\u0413",
        "G"
    ],
    [
        "\u0433",
        "g"
    ],
    [
        "\u0414",
        "D"
    ],
    [
        "\u0434",
        "d"
    ],
    [
        "\u044A\u0435",
        "ye"
    ],
    [
        "\u042A\u0435",
        "Ye"
    ],
    [
        "\u044A\u0415",
        "yE"
    ],
    [
        "\u042A\u0415",
        "YE"
    ],
    [
        "\u0415",
        "E"
    ],
    [
        "\u0435",
        "e"
    ],
    [
        "\u0401",
        "Yo"
    ],
    [
        "\u0451",
        "yo"
    ],
    [
        "\u0416",
        "Zh"
    ],
    [
        "\u0436",
        "zh"
    ],
    [
        "\u0417",
        "Z"
    ],
    [
        "\u0437",
        "z"
    ],
    [
        "\u0418",
        "I"
    ],
    [
        "\u0438",
        "i"
    ],
    [
        "\u044B\u0439",
        "iy"
    ],
    [
        "\u042B\u0439",
        "Iy"
    ],
    [
        "\u042B\u0419",
        "IY"
    ],
    [
        "\u044B\u0419",
        "iY"
    ],
    [
        "\u0419",
        "Y"
    ],
    [
        "\u0439",
        "y"
    ],
    [
        "\u041A",
        "K"
    ],
    [
        "\u043A",
        "k"
    ],
    [
        "\u041B",
        "L"
    ],
    [
        "\u043B",
        "l"
    ],
    [
        "\u041C",
        "M"
    ],
    [
        "\u043C",
        "m"
    ],
    [
        "\u041D",
        "N"
    ],
    [
        "\u043D",
        "n"
    ],
    [
        "\u041E",
        "O"
    ],
    [
        "\u043E",
        "o"
    ],
    [
        "\u041F",
        "P"
    ],
    [
        "\u043F",
        "p"
    ],
    [
        "\u0420",
        "R"
    ],
    [
        "\u0440",
        "r"
    ],
    [
        "\u0421",
        "S"
    ],
    [
        "\u0441",
        "s"
    ],
    [
        "\u0422",
        "T"
    ],
    [
        "\u0442",
        "t"
    ],
    [
        "\u0423",
        "U"
    ],
    [
        "\u0443",
        "u"
    ],
    [
        "\u0424",
        "F"
    ],
    [
        "\u0444",
        "f"
    ],
    [
        "\u0425",
        "Kh"
    ],
    [
        "\u0445",
        "kh"
    ],
    [
        "\u0426",
        "Ts"
    ],
    [
        "\u0446",
        "ts"
    ],
    [
        "\u0427",
        "Ch"
    ],
    [
        "\u0447",
        "ch"
    ],
    [
        "\u0428",
        "Sh"
    ],
    [
        "\u0448",
        "sh"
    ],
    [
        "\u0429",
        "Sch"
    ],
    [
        "\u0449",
        "sch"
    ],
    [
        "\u042A",
        ""
    ],
    [
        "\u044A",
        ""
    ],
    [
        "\u042B",
        "Y"
    ],
    [
        "\u044B",
        "y"
    ],
    [
        "\u042C",
        ""
    ],
    [
        "\u044C",
        ""
    ],
    [
        "\u042D",
        "E"
    ],
    [
        "\u044D",
        "e"
    ],
    [
        "\u042E",
        "Yu"
    ],
    [
        "\u044E",
        "yu"
    ],
    [
        "\u042F",
        "Ya"
    ],
    [
        "\u044F",
        "ya"
    ],
    [
        "\u0103",
        "a"
    ],
    [
        "\u0102",
        "A"
    ],
    [
        "\u0219",
        "s"
    ],
    [
        "\u0218",
        "S"
    ],
    [
        "\u021B",
        "t"
    ],
    [
        "\u021A",
        "T"
    ],
    [
        "\u0163",
        "t"
    ],
    [
        "\u0162",
        "T"
    ],
    [
        "\u015F",
        "s"
    ],
    [
        "\u015E",
        "S"
    ],
    [
        "\xE7",
        "c"
    ],
    [
        "\xC7",
        "C"
    ],
    [
        "\u011F",
        "g"
    ],
    [
        "\u011E",
        "G"
    ],
    [
        "\u0131",
        "i"
    ],
    [
        "\u0130",
        "I"
    ],
    [
        "\u0561",
        "a"
    ],
    [
        "\u0531",
        "A"
    ],
    [
        "\u0562",
        "b"
    ],
    [
        "\u0532",
        "B"
    ],
    [
        "\u0563",
        "g"
    ],
    [
        "\u0533",
        "G"
    ],
    [
        "\u0564",
        "d"
    ],
    [
        "\u0534",
        "D"
    ],
    [
        "\u0565",
        "ye"
    ],
    [
        "\u0535",
        "Ye"
    ],
    [
        "\u0566",
        "z"
    ],
    [
        "\u0536",
        "Z"
    ],
    [
        "\u0567",
        "e"
    ],
    [
        "\u0537",
        "E"
    ],
    [
        "\u0568",
        "y"
    ],
    [
        "\u0538",
        "Y"
    ],
    [
        "\u0569",
        "t"
    ],
    [
        "\u0539",
        "T"
    ],
    [
        "\u056A",
        "zh"
    ],
    [
        "\u053A",
        "Zh"
    ],
    [
        "\u056B",
        "i"
    ],
    [
        "\u053B",
        "I"
    ],
    [
        "\u056C",
        "l"
    ],
    [
        "\u053C",
        "L"
    ],
    [
        "\u056D",
        "kh"
    ],
    [
        "\u053D",
        "Kh"
    ],
    [
        "\u056E",
        "ts"
    ],
    [
        "\u053E",
        "Ts"
    ],
    [
        "\u056F",
        "k"
    ],
    [
        "\u053F",
        "K"
    ],
    [
        "\u0570",
        "h"
    ],
    [
        "\u0540",
        "H"
    ],
    [
        "\u0571",
        "dz"
    ],
    [
        "\u0541",
        "Dz"
    ],
    [
        "\u0572",
        "gh"
    ],
    [
        "\u0542",
        "Gh"
    ],
    [
        "\u0573",
        "tch"
    ],
    [
        "\u0543",
        "Tch"
    ],
    [
        "\u0574",
        "m"
    ],
    [
        "\u0544",
        "M"
    ],
    [
        "\u0575",
        "y"
    ],
    [
        "\u0545",
        "Y"
    ],
    [
        "\u0576",
        "n"
    ],
    [
        "\u0546",
        "N"
    ],
    [
        "\u0577",
        "sh"
    ],
    [
        "\u0547",
        "Sh"
    ],
    [
        "\u0578",
        "vo"
    ],
    [
        "\u0548",
        "Vo"
    ],
    [
        "\u0579",
        "ch"
    ],
    [
        "\u0549",
        "Ch"
    ],
    [
        "\u057A",
        "p"
    ],
    [
        "\u054A",
        "P"
    ],
    [
        "\u057B",
        "j"
    ],
    [
        "\u054B",
        "J"
    ],
    [
        "\u057C",
        "r"
    ],
    [
        "\u054C",
        "R"
    ],
    [
        "\u057D",
        "s"
    ],
    [
        "\u054D",
        "S"
    ],
    [
        "\u057E",
        "v"
    ],
    [
        "\u054E",
        "V"
    ],
    [
        "\u057F",
        "t"
    ],
    [
        "\u054F",
        "T"
    ],
    [
        "\u0580",
        "r"
    ],
    [
        "\u0550",
        "R"
    ],
    [
        "\u0581",
        "c"
    ],
    [
        "\u0551",
        "C"
    ],
    [
        "\u0578\u0582",
        "u"
    ],
    [
        "\u0548\u0552",
        "U"
    ],
    [
        "\u0548\u0582",
        "U"
    ],
    [
        "\u0583",
        "p"
    ],
    [
        "\u0553",
        "P"
    ],
    [
        "\u0584",
        "q"
    ],
    [
        "\u0554",
        "Q"
    ],
    [
        "\u0585",
        "o"
    ],
    [
        "\u0555",
        "O"
    ],
    [
        "\u0586",
        "f"
    ],
    [
        "\u0556",
        "F"
    ],
    [
        "\u0587",
        "yev"
    ],
    [
        "\u10D0",
        "a"
    ],
    [
        "\u10D1",
        "b"
    ],
    [
        "\u10D2",
        "g"
    ],
    [
        "\u10D3",
        "d"
    ],
    [
        "\u10D4",
        "e"
    ],
    [
        "\u10D5",
        "v"
    ],
    [
        "\u10D6",
        "z"
    ],
    [
        "\u10D7",
        "t"
    ],
    [
        "\u10D8",
        "i"
    ],
    [
        "\u10D9",
        "k"
    ],
    [
        "\u10DA",
        "l"
    ],
    [
        "\u10DB",
        "m"
    ],
    [
        "\u10DC",
        "n"
    ],
    [
        "\u10DD",
        "o"
    ],
    [
        "\u10DE",
        "p"
    ],
    [
        "\u10DF",
        "zh"
    ],
    [
        "\u10E0",
        "r"
    ],
    [
        "\u10E1",
        "s"
    ],
    [
        "\u10E2",
        "t"
    ],
    [
        "\u10E3",
        "u"
    ],
    [
        "\u10E4",
        "ph"
    ],
    [
        "\u10E5",
        "q"
    ],
    [
        "\u10E6",
        "gh"
    ],
    [
        "\u10E7",
        "k"
    ],
    [
        "\u10E8",
        "sh"
    ],
    [
        "\u10E9",
        "ch"
    ],
    [
        "\u10EA",
        "ts"
    ],
    [
        "\u10EB",
        "dz"
    ],
    [
        "\u10EC",
        "ts"
    ],
    [
        "\u10ED",
        "tch"
    ],
    [
        "\u10EE",
        "kh"
    ],
    [
        "\u10EF",
        "j"
    ],
    [
        "\u10F0",
        "h"
    ],
    [
        "\u010D",
        "c"
    ],
    [
        "\u010F",
        "d"
    ],
    [
        "\u011B",
        "e"
    ],
    [
        "\u0148",
        "n"
    ],
    [
        "\u0159",
        "r"
    ],
    [
        "\u0161",
        "s"
    ],
    [
        "\u0165",
        "t"
    ],
    [
        "\u016F",
        "u"
    ],
    [
        "\u017E",
        "z"
    ],
    [
        "\u010C",
        "C"
    ],
    [
        "\u010E",
        "D"
    ],
    [
        "\u011A",
        "E"
    ],
    [
        "\u0147",
        "N"
    ],
    [
        "\u0158",
        "R"
    ],
    [
        "\u0160",
        "S"
    ],
    [
        "\u0164",
        "T"
    ],
    [
        "\u016E",
        "U"
    ],
    [
        "\u017D",
        "Z"
    ],
    [
        "\u0780",
        "h"
    ],
    [
        "\u0781",
        "sh"
    ],
    [
        "\u0782",
        "n"
    ],
    [
        "\u0783",
        "r"
    ],
    [
        "\u0784",
        "b"
    ],
    [
        "\u0785",
        "lh"
    ],
    [
        "\u0786",
        "k"
    ],
    [
        "\u0787",
        "a"
    ],
    [
        "\u0788",
        "v"
    ],
    [
        "\u0789",
        "m"
    ],
    [
        "\u078A",
        "f"
    ],
    [
        "\u078B",
        "dh"
    ],
    [
        "\u078C",
        "th"
    ],
    [
        "\u078D",
        "l"
    ],
    [
        "\u078E",
        "g"
    ],
    [
        "\u078F",
        "gn"
    ],
    [
        "\u0790",
        "s"
    ],
    [
        "\u0791",
        "d"
    ],
    [
        "\u0792",
        "z"
    ],
    [
        "\u0793",
        "t"
    ],
    [
        "\u0794",
        "y"
    ],
    [
        "\u0795",
        "p"
    ],
    [
        "\u0796",
        "j"
    ],
    [
        "\u0797",
        "ch"
    ],
    [
        "\u0798",
        "tt"
    ],
    [
        "\u0799",
        "hh"
    ],
    [
        "\u079A",
        "kh"
    ],
    [
        "\u079B",
        "th"
    ],
    [
        "\u079C",
        "z"
    ],
    [
        "\u079D",
        "sh"
    ],
    [
        "\u079E",
        "s"
    ],
    [
        "\u079F",
        "d"
    ],
    [
        "\u07A0",
        "t"
    ],
    [
        "\u07A1",
        "z"
    ],
    [
        "\u07A2",
        "a"
    ],
    [
        "\u07A3",
        "gh"
    ],
    [
        "\u07A4",
        "q"
    ],
    [
        "\u07A5",
        "w"
    ],
    [
        "\u07A6",
        "a"
    ],
    [
        "\u07A7",
        "aa"
    ],
    [
        "\u07A8",
        "i"
    ],
    [
        "\u07A9",
        "ee"
    ],
    [
        "\u07AA",
        "u"
    ],
    [
        "\u07AB",
        "oo"
    ],
    [
        "\u07AC",
        "e"
    ],
    [
        "\u07AD",
        "ey"
    ],
    [
        "\u07AE",
        "o"
    ],
    [
        "\u07AF",
        "oa"
    ],
    [
        "\u07B0",
        ""
    ],
    [
        "\u03B1",
        "a"
    ],
    [
        "\u03B2",
        "v"
    ],
    [
        "\u03B3",
        "g"
    ],
    [
        "\u03B4",
        "d"
    ],
    [
        "\u03B5",
        "e"
    ],
    [
        "\u03B6",
        "z"
    ],
    [
        "\u03B7",
        "i"
    ],
    [
        "\u03B8",
        "th"
    ],
    [
        "\u03B9",
        "i"
    ],
    [
        "\u03BA",
        "k"
    ],
    [
        "\u03BB",
        "l"
    ],
    [
        "\u03BC",
        "m"
    ],
    [
        "\u03BD",
        "n"
    ],
    [
        "\u03BE",
        "ks"
    ],
    [
        "\u03BF",
        "o"
    ],
    [
        "\u03C0",
        "p"
    ],
    [
        "\u03C1",
        "r"
    ],
    [
        "\u03C3",
        "s"
    ],
    [
        "\u03C4",
        "t"
    ],
    [
        "\u03C5",
        "y"
    ],
    [
        "\u03C6",
        "f"
    ],
    [
        "\u03C7",
        "x"
    ],
    [
        "\u03C8",
        "ps"
    ],
    [
        "\u03C9",
        "o"
    ],
    [
        "\u03AC",
        "a"
    ],
    [
        "\u03AD",
        "e"
    ],
    [
        "\u03AF",
        "i"
    ],
    [
        "\u03CC",
        "o"
    ],
    [
        "\u03CD",
        "y"
    ],
    [
        "\u03AE",
        "i"
    ],
    [
        "\u03CE",
        "o"
    ],
    [
        "\u03C2",
        "s"
    ],
    [
        "\u03CA",
        "i"
    ],
    [
        "\u03B0",
        "y"
    ],
    [
        "\u03CB",
        "y"
    ],
    [
        "\u0390",
        "i"
    ],
    [
        "\u0391",
        "A"
    ],
    [
        "\u0392",
        "B"
    ],
    [
        "\u0393",
        "G"
    ],
    [
        "\u0394",
        "D"
    ],
    [
        "\u0395",
        "E"
    ],
    [
        "\u0396",
        "Z"
    ],
    [
        "\u0397",
        "I"
    ],
    [
        "\u0398",
        "TH"
    ],
    [
        "\u0399",
        "I"
    ],
    [
        "\u039A",
        "K"
    ],
    [
        "\u039B",
        "L"
    ],
    [
        "\u039C",
        "M"
    ],
    [
        "\u039D",
        "N"
    ],
    [
        "\u039E",
        "KS"
    ],
    [
        "\u039F",
        "O"
    ],
    [
        "\u03A0",
        "P"
    ],
    [
        "\u03A1",
        "R"
    ],
    [
        "\u03A3",
        "S"
    ],
    [
        "\u03A4",
        "T"
    ],
    [
        "\u03A5",
        "Y"
    ],
    [
        "\u03A6",
        "F"
    ],
    [
        "\u03A7",
        "X"
    ],
    [
        "\u03A8",
        "PS"
    ],
    [
        "\u03A9",
        "O"
    ],
    [
        "\u0386",
        "A"
    ],
    [
        "\u0388",
        "E"
    ],
    [
        "\u038A",
        "I"
    ],
    [
        "\u038C",
        "O"
    ],
    [
        "\u038E",
        "Y"
    ],
    [
        "\u0389",
        "I"
    ],
    [
        "\u038F",
        "O"
    ],
    [
        "\u03AA",
        "I"
    ],
    [
        "\u03AB",
        "Y"
    ],
    [
        "\u0101",
        "a"
    ],
    [
        "\u0113",
        "e"
    ],
    [
        "\u0123",
        "g"
    ],
    [
        "\u012B",
        "i"
    ],
    [
        "\u0137",
        "k"
    ],
    [
        "\u013C",
        "l"
    ],
    [
        "\u0146",
        "n"
    ],
    [
        "\u016B",
        "u"
    ],
    [
        "\u0100",
        "A"
    ],
    [
        "\u0112",
        "E"
    ],
    [
        "\u0122",
        "G"
    ],
    [
        "\u012A",
        "I"
    ],
    [
        "\u0136",
        "K"
    ],
    [
        "\u013B",
        "L"
    ],
    [
        "\u0145",
        "N"
    ],
    [
        "\u016A",
        "U"
    ],
    [
        "\u010D",
        "c"
    ],
    [
        "\u0161",
        "s"
    ],
    [
        "\u017E",
        "z"
    ],
    [
        "\u010C",
        "C"
    ],
    [
        "\u0160",
        "S"
    ],
    [
        "\u017D",
        "Z"
    ],
    [
        "\u0105",
        "a"
    ],
    [
        "\u010D",
        "c"
    ],
    [
        "\u0119",
        "e"
    ],
    [
        "\u0117",
        "e"
    ],
    [
        "\u012F",
        "i"
    ],
    [
        "\u0161",
        "s"
    ],
    [
        "\u0173",
        "u"
    ],
    [
        "\u016B",
        "u"
    ],
    [
        "\u017E",
        "z"
    ],
    [
        "\u0104",
        "A"
    ],
    [
        "\u010C",
        "C"
    ],
    [
        "\u0118",
        "E"
    ],
    [
        "\u0116",
        "E"
    ],
    [
        "\u012E",
        "I"
    ],
    [
        "\u0160",
        "S"
    ],
    [
        "\u0172",
        "U"
    ],
    [
        "\u016A",
        "U"
    ],
    [
        "\u040C",
        "Kj"
    ],
    [
        "\u045C",
        "kj"
    ],
    [
        "\u0409",
        "Lj"
    ],
    [
        "\u0459",
        "lj"
    ],
    [
        "\u040A",
        "Nj"
    ],
    [
        "\u045A",
        "nj"
    ],
    [
        "\u0422\u0441",
        "Ts"
    ],
    [
        "\u0442\u0441",
        "ts"
    ],
    [
        "\u0105",
        "a"
    ],
    [
        "\u0107",
        "c"
    ],
    [
        "\u0119",
        "e"
    ],
    [
        "\u0142",
        "l"
    ],
    [
        "\u0144",
        "n"
    ],
    [
        "\u015B",
        "s"
    ],
    [
        "\u017A",
        "z"
    ],
    [
        "\u017C",
        "z"
    ],
    [
        "\u0104",
        "A"
    ],
    [
        "\u0106",
        "C"
    ],
    [
        "\u0118",
        "E"
    ],
    [
        "\u0141",
        "L"
    ],
    [
        "\u0143",
        "N"
    ],
    [
        "\u015A",
        "S"
    ],
    [
        "\u0179",
        "Z"
    ],
    [
        "\u017B",
        "Z"
    ],
    [
        "\u0404",
        "Ye"
    ],
    [
        "\u0406",
        "I"
    ],
    [
        "\u0407",
        "Yi"
    ],
    [
        "\u0490",
        "G"
    ],
    [
        "\u0454",
        "ye"
    ],
    [
        "\u0456",
        "i"
    ],
    [
        "\u0457",
        "yi"
    ],
    [
        "\u0491",
        "g"
    ],
    [
        "\u0132",
        "IJ"
    ],
    [
        "\u0133",
        "ij"
    ],
    [
        "\xA2",
        "c"
    ],
    [
        "\xA5",
        "Y"
    ],
    [
        "\u07FF",
        "b"
    ],
    [
        "\u09F3",
        "t"
    ],
    [
        "\u0AF1",
        "Bo"
    ],
    [
        "\u0E3F",
        "B"
    ],
    [
        "\u20A0",
        "CE"
    ],
    [
        "\u20A1",
        "C"
    ],
    [
        "\u20A2",
        "Cr"
    ],
    [
        "\u20A3",
        "F"
    ],
    [
        "\u20A5",
        "m"
    ],
    [
        "\u20A6",
        "N"
    ],
    [
        "\u20A7",
        "Pt"
    ],
    [
        "\u20A8",
        "Rs"
    ],
    [
        "\u20A9",
        "W"
    ],
    [
        "\u20AB",
        "s"
    ],
    [
        "\u20AC",
        "E"
    ],
    [
        "\u20AD",
        "K"
    ],
    [
        "\u20AE",
        "T"
    ],
    [
        "\u20AF",
        "Dp"
    ],
    [
        "\u20B0",
        "S"
    ],
    [
        "\u20B1",
        "P"
    ],
    [
        "\u20B2",
        "G"
    ],
    [
        "\u20B3",
        "A"
    ],
    [
        "\u20B4",
        "S"
    ],
    [
        "\u20B5",
        "C"
    ],
    [
        "\u20B6",
        "tt"
    ],
    [
        "\u20B7",
        "S"
    ],
    [
        "\u20B8",
        "T"
    ],
    [
        "\u20B9",
        "R"
    ],
    [
        "\u20BA",
        "L"
    ],
    [
        "\u20BD",
        "P"
    ],
    [
        "\u20BF",
        "B"
    ],
    [
        "\uFE69",
        "$"
    ],
    [
        "\uFFE0",
        "c"
    ],
    [
        "\uFFE5",
        "Y"
    ],
    [
        "\uFFE6",
        "W"
    ],
    [
        "\uD835\uDC00",
        "A"
    ],
    [
        "\uD835\uDC01",
        "B"
    ],
    [
        "\uD835\uDC02",
        "C"
    ],
    [
        "\uD835\uDC03",
        "D"
    ],
    [
        "\uD835\uDC04",
        "E"
    ],
    [
        "\uD835\uDC05",
        "F"
    ],
    [
        "\uD835\uDC06",
        "G"
    ],
    [
        "\uD835\uDC07",
        "H"
    ],
    [
        "\uD835\uDC08",
        "I"
    ],
    [
        "\uD835\uDC09",
        "J"
    ],
    [
        "\uD835\uDC0A",
        "K"
    ],
    [
        "\uD835\uDC0B",
        "L"
    ],
    [
        "\uD835\uDC0C",
        "M"
    ],
    [
        "\uD835\uDC0D",
        "N"
    ],
    [
        "\uD835\uDC0E",
        "O"
    ],
    [
        "\uD835\uDC0F",
        "P"
    ],
    [
        "\uD835\uDC10",
        "Q"
    ],
    [
        "\uD835\uDC11",
        "R"
    ],
    [
        "\uD835\uDC12",
        "S"
    ],
    [
        "\uD835\uDC13",
        "T"
    ],
    [
        "\uD835\uDC14",
        "U"
    ],
    [
        "\uD835\uDC15",
        "V"
    ],
    [
        "\uD835\uDC16",
        "W"
    ],
    [
        "\uD835\uDC17",
        "X"
    ],
    [
        "\uD835\uDC18",
        "Y"
    ],
    [
        "\uD835\uDC19",
        "Z"
    ],
    [
        "\uD835\uDC1A",
        "a"
    ],
    [
        "\uD835\uDC1B",
        "b"
    ],
    [
        "\uD835\uDC1C",
        "c"
    ],
    [
        "\uD835\uDC1D",
        "d"
    ],
    [
        "\uD835\uDC1E",
        "e"
    ],
    [
        "\uD835\uDC1F",
        "f"
    ],
    [
        "\uD835\uDC20",
        "g"
    ],
    [
        "\uD835\uDC21",
        "h"
    ],
    [
        "\uD835\uDC22",
        "i"
    ],
    [
        "\uD835\uDC23",
        "j"
    ],
    [
        "\uD835\uDC24",
        "k"
    ],
    [
        "\uD835\uDC25",
        "l"
    ],
    [
        "\uD835\uDC26",
        "m"
    ],
    [
        "\uD835\uDC27",
        "n"
    ],
    [
        "\uD835\uDC28",
        "o"
    ],
    [
        "\uD835\uDC29",
        "p"
    ],
    [
        "\uD835\uDC2A",
        "q"
    ],
    [
        "\uD835\uDC2B",
        "r"
    ],
    [
        "\uD835\uDC2C",
        "s"
    ],
    [
        "\uD835\uDC2D",
        "t"
    ],
    [
        "\uD835\uDC2E",
        "u"
    ],
    [
        "\uD835\uDC2F",
        "v"
    ],
    [
        "\uD835\uDC30",
        "w"
    ],
    [
        "\uD835\uDC31",
        "x"
    ],
    [
        "\uD835\uDC32",
        "y"
    ],
    [
        "\uD835\uDC33",
        "z"
    ],
    [
        "\uD835\uDC34",
        "A"
    ],
    [
        "\uD835\uDC35",
        "B"
    ],
    [
        "\uD835\uDC36",
        "C"
    ],
    [
        "\uD835\uDC37",
        "D"
    ],
    [
        "\uD835\uDC38",
        "E"
    ],
    [
        "\uD835\uDC39",
        "F"
    ],
    [
        "\uD835\uDC3A",
        "G"
    ],
    [
        "\uD835\uDC3B",
        "H"
    ],
    [
        "\uD835\uDC3C",
        "I"
    ],
    [
        "\uD835\uDC3D",
        "J"
    ],
    [
        "\uD835\uDC3E",
        "K"
    ],
    [
        "\uD835\uDC3F",
        "L"
    ],
    [
        "\uD835\uDC40",
        "M"
    ],
    [
        "\uD835\uDC41",
        "N"
    ],
    [
        "\uD835\uDC42",
        "O"
    ],
    [
        "\uD835\uDC43",
        "P"
    ],
    [
        "\uD835\uDC44",
        "Q"
    ],
    [
        "\uD835\uDC45",
        "R"
    ],
    [
        "\uD835\uDC46",
        "S"
    ],
    [
        "\uD835\uDC47",
        "T"
    ],
    [
        "\uD835\uDC48",
        "U"
    ],
    [
        "\uD835\uDC49",
        "V"
    ],
    [
        "\uD835\uDC4A",
        "W"
    ],
    [
        "\uD835\uDC4B",
        "X"
    ],
    [
        "\uD835\uDC4C",
        "Y"
    ],
    [
        "\uD835\uDC4D",
        "Z"
    ],
    [
        "\uD835\uDC4E",
        "a"
    ],
    [
        "\uD835\uDC4F",
        "b"
    ],
    [
        "\uD835\uDC50",
        "c"
    ],
    [
        "\uD835\uDC51",
        "d"
    ],
    [
        "\uD835\uDC52",
        "e"
    ],
    [
        "\uD835\uDC53",
        "f"
    ],
    [
        "\uD835\uDC54",
        "g"
    ],
    [
        "\uD835\uDC56",
        "i"
    ],
    [
        "\uD835\uDC57",
        "j"
    ],
    [
        "\uD835\uDC58",
        "k"
    ],
    [
        "\uD835\uDC59",
        "l"
    ],
    [
        "\uD835\uDC5A",
        "m"
    ],
    [
        "\uD835\uDC5B",
        "n"
    ],
    [
        "\uD835\uDC5C",
        "o"
    ],
    [
        "\uD835\uDC5D",
        "p"
    ],
    [
        "\uD835\uDC5E",
        "q"
    ],
    [
        "\uD835\uDC5F",
        "r"
    ],
    [
        "\uD835\uDC60",
        "s"
    ],
    [
        "\uD835\uDC61",
        "t"
    ],
    [
        "\uD835\uDC62",
        "u"
    ],
    [
        "\uD835\uDC63",
        "v"
    ],
    [
        "\uD835\uDC64",
        "w"
    ],
    [
        "\uD835\uDC65",
        "x"
    ],
    [
        "\uD835\uDC66",
        "y"
    ],
    [
        "\uD835\uDC67",
        "z"
    ],
    [
        "\uD835\uDC68",
        "A"
    ],
    [
        "\uD835\uDC69",
        "B"
    ],
    [
        "\uD835\uDC6A",
        "C"
    ],
    [
        "\uD835\uDC6B",
        "D"
    ],
    [
        "\uD835\uDC6C",
        "E"
    ],
    [
        "\uD835\uDC6D",
        "F"
    ],
    [
        "\uD835\uDC6E",
        "G"
    ],
    [
        "\uD835\uDC6F",
        "H"
    ],
    [
        "\uD835\uDC70",
        "I"
    ],
    [
        "\uD835\uDC71",
        "J"
    ],
    [
        "\uD835\uDC72",
        "K"
    ],
    [
        "\uD835\uDC73",
        "L"
    ],
    [
        "\uD835\uDC74",
        "M"
    ],
    [
        "\uD835\uDC75",
        "N"
    ],
    [
        "\uD835\uDC76",
        "O"
    ],
    [
        "\uD835\uDC77",
        "P"
    ],
    [
        "\uD835\uDC78",
        "Q"
    ],
    [
        "\uD835\uDC79",
        "R"
    ],
    [
        "\uD835\uDC7A",
        "S"
    ],
    [
        "\uD835\uDC7B",
        "T"
    ],
    [
        "\uD835\uDC7C",
        "U"
    ],
    [
        "\uD835\uDC7D",
        "V"
    ],
    [
        "\uD835\uDC7E",
        "W"
    ],
    [
        "\uD835\uDC7F",
        "X"
    ],
    [
        "\uD835\uDC80",
        "Y"
    ],
    [
        "\uD835\uDC81",
        "Z"
    ],
    [
        "\uD835\uDC82",
        "a"
    ],
    [
        "\uD835\uDC83",
        "b"
    ],
    [
        "\uD835\uDC84",
        "c"
    ],
    [
        "\uD835\uDC85",
        "d"
    ],
    [
        "\uD835\uDC86",
        "e"
    ],
    [
        "\uD835\uDC87",
        "f"
    ],
    [
        "\uD835\uDC88",
        "g"
    ],
    [
        "\uD835\uDC89",
        "h"
    ],
    [
        "\uD835\uDC8A",
        "i"
    ],
    [
        "\uD835\uDC8B",
        "j"
    ],
    [
        "\uD835\uDC8C",
        "k"
    ],
    [
        "\uD835\uDC8D",
        "l"
    ],
    [
        "\uD835\uDC8E",
        "m"
    ],
    [
        "\uD835\uDC8F",
        "n"
    ],
    [
        "\uD835\uDC90",
        "o"
    ],
    [
        "\uD835\uDC91",
        "p"
    ],
    [
        "\uD835\uDC92",
        "q"
    ],
    [
        "\uD835\uDC93",
        "r"
    ],
    [
        "\uD835\uDC94",
        "s"
    ],
    [
        "\uD835\uDC95",
        "t"
    ],
    [
        "\uD835\uDC96",
        "u"
    ],
    [
        "\uD835\uDC97",
        "v"
    ],
    [
        "\uD835\uDC98",
        "w"
    ],
    [
        "\uD835\uDC99",
        "x"
    ],
    [
        "\uD835\uDC9A",
        "y"
    ],
    [
        "\uD835\uDC9B",
        "z"
    ],
    [
        "\uD835\uDC9C",
        "A"
    ],
    [
        "\uD835\uDC9E",
        "C"
    ],
    [
        "\uD835\uDC9F",
        "D"
    ],
    [
        "\uD835\uDCA2",
        "g"
    ],
    [
        "\uD835\uDCA5",
        "J"
    ],
    [
        "\uD835\uDCA6",
        "K"
    ],
    [
        "\uD835\uDCA9",
        "N"
    ],
    [
        "\uD835\uDCAA",
        "O"
    ],
    [
        "\uD835\uDCAB",
        "P"
    ],
    [
        "\uD835\uDCAC",
        "Q"
    ],
    [
        "\uD835\uDCAE",
        "S"
    ],
    [
        "\uD835\uDCAF",
        "T"
    ],
    [
        "\uD835\uDCB0",
        "U"
    ],
    [
        "\uD835\uDCB1",
        "V"
    ],
    [
        "\uD835\uDCB2",
        "W"
    ],
    [
        "\uD835\uDCB3",
        "X"
    ],
    [
        "\uD835\uDCB4",
        "Y"
    ],
    [
        "\uD835\uDCB5",
        "Z"
    ],
    [
        "\uD835\uDCB6",
        "a"
    ],
    [
        "\uD835\uDCB7",
        "b"
    ],
    [
        "\uD835\uDCB8",
        "c"
    ],
    [
        "\uD835\uDCB9",
        "d"
    ],
    [
        "\uD835\uDCBB",
        "f"
    ],
    [
        "\uD835\uDCBD",
        "h"
    ],
    [
        "\uD835\uDCBE",
        "i"
    ],
    [
        "\uD835\uDCBF",
        "j"
    ],
    [
        "\uD835\uDCC0",
        "h"
    ],
    [
        "\uD835\uDCC1",
        "l"
    ],
    [
        "\uD835\uDCC2",
        "m"
    ],
    [
        "\uD835\uDCC3",
        "n"
    ],
    [
        "\uD835\uDCC5",
        "p"
    ],
    [
        "\uD835\uDCC6",
        "q"
    ],
    [
        "\uD835\uDCC7",
        "r"
    ],
    [
        "\uD835\uDCC8",
        "s"
    ],
    [
        "\uD835\uDCC9",
        "t"
    ],
    [
        "\uD835\uDCCA",
        "u"
    ],
    [
        "\uD835\uDCCB",
        "v"
    ],
    [
        "\uD835\uDCCC",
        "w"
    ],
    [
        "\uD835\uDCCD",
        "x"
    ],
    [
        "\uD835\uDCCE",
        "y"
    ],
    [
        "\uD835\uDCCF",
        "z"
    ],
    [
        "\uD835\uDCD0",
        "A"
    ],
    [
        "\uD835\uDCD1",
        "B"
    ],
    [
        "\uD835\uDCD2",
        "C"
    ],
    [
        "\uD835\uDCD3",
        "D"
    ],
    [
        "\uD835\uDCD4",
        "E"
    ],
    [
        "\uD835\uDCD5",
        "F"
    ],
    [
        "\uD835\uDCD6",
        "G"
    ],
    [
        "\uD835\uDCD7",
        "H"
    ],
    [
        "\uD835\uDCD8",
        "I"
    ],
    [
        "\uD835\uDCD9",
        "J"
    ],
    [
        "\uD835\uDCDA",
        "K"
    ],
    [
        "\uD835\uDCDB",
        "L"
    ],
    [
        "\uD835\uDCDC",
        "M"
    ],
    [
        "\uD835\uDCDD",
        "N"
    ],
    [
        "\uD835\uDCDE",
        "O"
    ],
    [
        "\uD835\uDCDF",
        "P"
    ],
    [
        "\uD835\uDCE0",
        "Q"
    ],
    [
        "\uD835\uDCE1",
        "R"
    ],
    [
        "\uD835\uDCE2",
        "S"
    ],
    [
        "\uD835\uDCE3",
        "T"
    ],
    [
        "\uD835\uDCE4",
        "U"
    ],
    [
        "\uD835\uDCE5",
        "V"
    ],
    [
        "\uD835\uDCE6",
        "W"
    ],
    [
        "\uD835\uDCE7",
        "X"
    ],
    [
        "\uD835\uDCE8",
        "Y"
    ],
    [
        "\uD835\uDCE9",
        "Z"
    ],
    [
        "\uD835\uDCEA",
        "a"
    ],
    [
        "\uD835\uDCEB",
        "b"
    ],
    [
        "\uD835\uDCEC",
        "c"
    ],
    [
        "\uD835\uDCED",
        "d"
    ],
    [
        "\uD835\uDCEE",
        "e"
    ],
    [
        "\uD835\uDCEF",
        "f"
    ],
    [
        "\uD835\uDCF0",
        "g"
    ],
    [
        "\uD835\uDCF1",
        "h"
    ],
    [
        "\uD835\uDCF2",
        "i"
    ],
    [
        "\uD835\uDCF3",
        "j"
    ],
    [
        "\uD835\uDCF4",
        "k"
    ],
    [
        "\uD835\uDCF5",
        "l"
    ],
    [
        "\uD835\uDCF6",
        "m"
    ],
    [
        "\uD835\uDCF7",
        "n"
    ],
    [
        "\uD835\uDCF8",
        "o"
    ],
    [
        "\uD835\uDCF9",
        "p"
    ],
    [
        "\uD835\uDCFA",
        "q"
    ],
    [
        "\uD835\uDCFB",
        "r"
    ],
    [
        "\uD835\uDCFC",
        "s"
    ],
    [
        "\uD835\uDCFD",
        "t"
    ],
    [
        "\uD835\uDCFE",
        "u"
    ],
    [
        "\uD835\uDCFF",
        "v"
    ],
    [
        "\uD835\uDD00",
        "w"
    ],
    [
        "\uD835\uDD01",
        "x"
    ],
    [
        "\uD835\uDD02",
        "y"
    ],
    [
        "\uD835\uDD03",
        "z"
    ],
    [
        "\uD835\uDD04",
        "A"
    ],
    [
        "\uD835\uDD05",
        "B"
    ],
    [
        "\uD835\uDD07",
        "D"
    ],
    [
        "\uD835\uDD08",
        "E"
    ],
    [
        "\uD835\uDD09",
        "F"
    ],
    [
        "\uD835\uDD0A",
        "G"
    ],
    [
        "\uD835\uDD0D",
        "J"
    ],
    [
        "\uD835\uDD0E",
        "K"
    ],
    [
        "\uD835\uDD0F",
        "L"
    ],
    [
        "\uD835\uDD10",
        "M"
    ],
    [
        "\uD835\uDD11",
        "N"
    ],
    [
        "\uD835\uDD12",
        "O"
    ],
    [
        "\uD835\uDD13",
        "P"
    ],
    [
        "\uD835\uDD14",
        "Q"
    ],
    [
        "\uD835\uDD16",
        "S"
    ],
    [
        "\uD835\uDD17",
        "T"
    ],
    [
        "\uD835\uDD18",
        "U"
    ],
    [
        "\uD835\uDD19",
        "V"
    ],
    [
        "\uD835\uDD1A",
        "W"
    ],
    [
        "\uD835\uDD1B",
        "X"
    ],
    [
        "\uD835\uDD1C",
        "Y"
    ],
    [
        "\uD835\uDD1E",
        "a"
    ],
    [
        "\uD835\uDD1F",
        "b"
    ],
    [
        "\uD835\uDD20",
        "c"
    ],
    [
        "\uD835\uDD21",
        "d"
    ],
    [
        "\uD835\uDD22",
        "e"
    ],
    [
        "\uD835\uDD23",
        "f"
    ],
    [
        "\uD835\uDD24",
        "g"
    ],
    [
        "\uD835\uDD25",
        "h"
    ],
    [
        "\uD835\uDD26",
        "i"
    ],
    [
        "\uD835\uDD27",
        "j"
    ],
    [
        "\uD835\uDD28",
        "k"
    ],
    [
        "\uD835\uDD29",
        "l"
    ],
    [
        "\uD835\uDD2A",
        "m"
    ],
    [
        "\uD835\uDD2B",
        "n"
    ],
    [
        "\uD835\uDD2C",
        "o"
    ],
    [
        "\uD835\uDD2D",
        "p"
    ],
    [
        "\uD835\uDD2E",
        "q"
    ],
    [
        "\uD835\uDD2F",
        "r"
    ],
    [
        "\uD835\uDD30",
        "s"
    ],
    [
        "\uD835\uDD31",
        "t"
    ],
    [
        "\uD835\uDD32",
        "u"
    ],
    [
        "\uD835\uDD33",
        "v"
    ],
    [
        "\uD835\uDD34",
        "w"
    ],
    [
        "\uD835\uDD35",
        "x"
    ],
    [
        "\uD835\uDD36",
        "y"
    ],
    [
        "\uD835\uDD37",
        "z"
    ],
    [
        "\uD835\uDD38",
        "A"
    ],
    [
        "\uD835\uDD39",
        "B"
    ],
    [
        "\uD835\uDD3B",
        "D"
    ],
    [
        "\uD835\uDD3C",
        "E"
    ],
    [
        "\uD835\uDD3D",
        "F"
    ],
    [
        "\uD835\uDD3E",
        "G"
    ],
    [
        "\uD835\uDD40",
        "I"
    ],
    [
        "\uD835\uDD41",
        "J"
    ],
    [
        "\uD835\uDD42",
        "K"
    ],
    [
        "\uD835\uDD43",
        "L"
    ],
    [
        "\uD835\uDD44",
        "M"
    ],
    [
        "\uD835\uDD46",
        "N"
    ],
    [
        "\uD835\uDD4A",
        "S"
    ],
    [
        "\uD835\uDD4B",
        "T"
    ],
    [
        "\uD835\uDD4C",
        "U"
    ],
    [
        "\uD835\uDD4D",
        "V"
    ],
    [
        "\uD835\uDD4E",
        "W"
    ],
    [
        "\uD835\uDD4F",
        "X"
    ],
    [
        "\uD835\uDD50",
        "Y"
    ],
    [
        "\uD835\uDD52",
        "a"
    ],
    [
        "\uD835\uDD53",
        "b"
    ],
    [
        "\uD835\uDD54",
        "c"
    ],
    [
        "\uD835\uDD55",
        "d"
    ],
    [
        "\uD835\uDD56",
        "e"
    ],
    [
        "\uD835\uDD57",
        "f"
    ],
    [
        "\uD835\uDD58",
        "g"
    ],
    [
        "\uD835\uDD59",
        "h"
    ],
    [
        "\uD835\uDD5A",
        "i"
    ],
    [
        "\uD835\uDD5B",
        "j"
    ],
    [
        "\uD835\uDD5C",
        "k"
    ],
    [
        "\uD835\uDD5D",
        "l"
    ],
    [
        "\uD835\uDD5E",
        "m"
    ],
    [
        "\uD835\uDD5F",
        "n"
    ],
    [
        "\uD835\uDD60",
        "o"
    ],
    [
        "\uD835\uDD61",
        "p"
    ],
    [
        "\uD835\uDD62",
        "q"
    ],
    [
        "\uD835\uDD63",
        "r"
    ],
    [
        "\uD835\uDD64",
        "s"
    ],
    [
        "\uD835\uDD65",
        "t"
    ],
    [
        "\uD835\uDD66",
        "u"
    ],
    [
        "\uD835\uDD67",
        "v"
    ],
    [
        "\uD835\uDD68",
        "w"
    ],
    [
        "\uD835\uDD69",
        "x"
    ],
    [
        "\uD835\uDD6A",
        "y"
    ],
    [
        "\uD835\uDD6B",
        "z"
    ],
    [
        "\uD835\uDD6C",
        "A"
    ],
    [
        "\uD835\uDD6D",
        "B"
    ],
    [
        "\uD835\uDD6E",
        "C"
    ],
    [
        "\uD835\uDD6F",
        "D"
    ],
    [
        "\uD835\uDD70",
        "E"
    ],
    [
        "\uD835\uDD71",
        "F"
    ],
    [
        "\uD835\uDD72",
        "G"
    ],
    [
        "\uD835\uDD73",
        "H"
    ],
    [
        "\uD835\uDD74",
        "I"
    ],
    [
        "\uD835\uDD75",
        "J"
    ],
    [
        "\uD835\uDD76",
        "K"
    ],
    [
        "\uD835\uDD77",
        "L"
    ],
    [
        "\uD835\uDD78",
        "M"
    ],
    [
        "\uD835\uDD79",
        "N"
    ],
    [
        "\uD835\uDD7A",
        "O"
    ],
    [
        "\uD835\uDD7B",
        "P"
    ],
    [
        "\uD835\uDD7C",
        "Q"
    ],
    [
        "\uD835\uDD7D",
        "R"
    ],
    [
        "\uD835\uDD7E",
        "S"
    ],
    [
        "\uD835\uDD7F",
        "T"
    ],
    [
        "\uD835\uDD80",
        "U"
    ],
    [
        "\uD835\uDD81",
        "V"
    ],
    [
        "\uD835\uDD82",
        "W"
    ],
    [
        "\uD835\uDD83",
        "X"
    ],
    [
        "\uD835\uDD84",
        "Y"
    ],
    [
        "\uD835\uDD85",
        "Z"
    ],
    [
        "\uD835\uDD86",
        "a"
    ],
    [
        "\uD835\uDD87",
        "b"
    ],
    [
        "\uD835\uDD88",
        "c"
    ],
    [
        "\uD835\uDD89",
        "d"
    ],
    [
        "\uD835\uDD8A",
        "e"
    ],
    [
        "\uD835\uDD8B",
        "f"
    ],
    [
        "\uD835\uDD8C",
        "g"
    ],
    [
        "\uD835\uDD8D",
        "h"
    ],
    [
        "\uD835\uDD8E",
        "i"
    ],
    [
        "\uD835\uDD8F",
        "j"
    ],
    [
        "\uD835\uDD90",
        "k"
    ],
    [
        "\uD835\uDD91",
        "l"
    ],
    [
        "\uD835\uDD92",
        "m"
    ],
    [
        "\uD835\uDD93",
        "n"
    ],
    [
        "\uD835\uDD94",
        "o"
    ],
    [
        "\uD835\uDD95",
        "p"
    ],
    [
        "\uD835\uDD96",
        "q"
    ],
    [
        "\uD835\uDD97",
        "r"
    ],
    [
        "\uD835\uDD98",
        "s"
    ],
    [
        "\uD835\uDD99",
        "t"
    ],
    [
        "\uD835\uDD9A",
        "u"
    ],
    [
        "\uD835\uDD9B",
        "v"
    ],
    [
        "\uD835\uDD9C",
        "w"
    ],
    [
        "\uD835\uDD9D",
        "x"
    ],
    [
        "\uD835\uDD9E",
        "y"
    ],
    [
        "\uD835\uDD9F",
        "z"
    ],
    [
        "\uD835\uDDA0",
        "A"
    ],
    [
        "\uD835\uDDA1",
        "B"
    ],
    [
        "\uD835\uDDA2",
        "C"
    ],
    [
        "\uD835\uDDA3",
        "D"
    ],
    [
        "\uD835\uDDA4",
        "E"
    ],
    [
        "\uD835\uDDA5",
        "F"
    ],
    [
        "\uD835\uDDA6",
        "G"
    ],
    [
        "\uD835\uDDA7",
        "H"
    ],
    [
        "\uD835\uDDA8",
        "I"
    ],
    [
        "\uD835\uDDA9",
        "J"
    ],
    [
        "\uD835\uDDAA",
        "K"
    ],
    [
        "\uD835\uDDAB",
        "L"
    ],
    [
        "\uD835\uDDAC",
        "M"
    ],
    [
        "\uD835\uDDAD",
        "N"
    ],
    [
        "\uD835\uDDAE",
        "O"
    ],
    [
        "\uD835\uDDAF",
        "P"
    ],
    [
        "\uD835\uDDB0",
        "Q"
    ],
    [
        "\uD835\uDDB1",
        "R"
    ],
    [
        "\uD835\uDDB2",
        "S"
    ],
    [
        "\uD835\uDDB3",
        "T"
    ],
    [
        "\uD835\uDDB4",
        "U"
    ],
    [
        "\uD835\uDDB5",
        "V"
    ],
    [
        "\uD835\uDDB6",
        "W"
    ],
    [
        "\uD835\uDDB7",
        "X"
    ],
    [
        "\uD835\uDDB8",
        "Y"
    ],
    [
        "\uD835\uDDB9",
        "Z"
    ],
    [
        "\uD835\uDDBA",
        "a"
    ],
    [
        "\uD835\uDDBB",
        "b"
    ],
    [
        "\uD835\uDDBC",
        "c"
    ],
    [
        "\uD835\uDDBD",
        "d"
    ],
    [
        "\uD835\uDDBE",
        "e"
    ],
    [
        "\uD835\uDDBF",
        "f"
    ],
    [
        "\uD835\uDDC0",
        "g"
    ],
    [
        "\uD835\uDDC1",
        "h"
    ],
    [
        "\uD835\uDDC2",
        "i"
    ],
    [
        "\uD835\uDDC3",
        "j"
    ],
    [
        "\uD835\uDDC4",
        "k"
    ],
    [
        "\uD835\uDDC5",
        "l"
    ],
    [
        "\uD835\uDDC6",
        "m"
    ],
    [
        "\uD835\uDDC7",
        "n"
    ],
    [
        "\uD835\uDDC8",
        "o"
    ],
    [
        "\uD835\uDDC9",
        "p"
    ],
    [
        "\uD835\uDDCA",
        "q"
    ],
    [
        "\uD835\uDDCB",
        "r"
    ],
    [
        "\uD835\uDDCC",
        "s"
    ],
    [
        "\uD835\uDDCD",
        "t"
    ],
    [
        "\uD835\uDDCE",
        "u"
    ],
    [
        "\uD835\uDDCF",
        "v"
    ],
    [
        "\uD835\uDDD0",
        "w"
    ],
    [
        "\uD835\uDDD1",
        "x"
    ],
    [
        "\uD835\uDDD2",
        "y"
    ],
    [
        "\uD835\uDDD3",
        "z"
    ],
    [
        "\uD835\uDDD4",
        "A"
    ],
    [
        "\uD835\uDDD5",
        "B"
    ],
    [
        "\uD835\uDDD6",
        "C"
    ],
    [
        "\uD835\uDDD7",
        "D"
    ],
    [
        "\uD835\uDDD8",
        "E"
    ],
    [
        "\uD835\uDDD9",
        "F"
    ],
    [
        "\uD835\uDDDA",
        "G"
    ],
    [
        "\uD835\uDDDB",
        "H"
    ],
    [
        "\uD835\uDDDC",
        "I"
    ],
    [
        "\uD835\uDDDD",
        "J"
    ],
    [
        "\uD835\uDDDE",
        "K"
    ],
    [
        "\uD835\uDDDF",
        "L"
    ],
    [
        "\uD835\uDDE0",
        "M"
    ],
    [
        "\uD835\uDDE1",
        "N"
    ],
    [
        "\uD835\uDDE2",
        "O"
    ],
    [
        "\uD835\uDDE3",
        "P"
    ],
    [
        "\uD835\uDDE4",
        "Q"
    ],
    [
        "\uD835\uDDE5",
        "R"
    ],
    [
        "\uD835\uDDE6",
        "S"
    ],
    [
        "\uD835\uDDE7",
        "T"
    ],
    [
        "\uD835\uDDE8",
        "U"
    ],
    [
        "\uD835\uDDE9",
        "V"
    ],
    [
        "\uD835\uDDEA",
        "W"
    ],
    [
        "\uD835\uDDEB",
        "X"
    ],
    [
        "\uD835\uDDEC",
        "Y"
    ],
    [
        "\uD835\uDDED",
        "Z"
    ],
    [
        "\uD835\uDDEE",
        "a"
    ],
    [
        "\uD835\uDDEF",
        "b"
    ],
    [
        "\uD835\uDDF0",
        "c"
    ],
    [
        "\uD835\uDDF1",
        "d"
    ],
    [
        "\uD835\uDDF2",
        "e"
    ],
    [
        "\uD835\uDDF3",
        "f"
    ],
    [
        "\uD835\uDDF4",
        "g"
    ],
    [
        "\uD835\uDDF5",
        "h"
    ],
    [
        "\uD835\uDDF6",
        "i"
    ],
    [
        "\uD835\uDDF7",
        "j"
    ],
    [
        "\uD835\uDDF8",
        "k"
    ],
    [
        "\uD835\uDDF9",
        "l"
    ],
    [
        "\uD835\uDDFA",
        "m"
    ],
    [
        "\uD835\uDDFB",
        "n"
    ],
    [
        "\uD835\uDDFC",
        "o"
    ],
    [
        "\uD835\uDDFD",
        "p"
    ],
    [
        "\uD835\uDDFE",
        "q"
    ],
    [
        "\uD835\uDDFF",
        "r"
    ],
    [
        "\uD835\uDE00",
        "s"
    ],
    [
        "\uD835\uDE01",
        "t"
    ],
    [
        "\uD835\uDE02",
        "u"
    ],
    [
        "\uD835\uDE03",
        "v"
    ],
    [
        "\uD835\uDE04",
        "w"
    ],
    [
        "\uD835\uDE05",
        "x"
    ],
    [
        "\uD835\uDE06",
        "y"
    ],
    [
        "\uD835\uDE07",
        "z"
    ],
    [
        "\uD835\uDE08",
        "A"
    ],
    [
        "\uD835\uDE09",
        "B"
    ],
    [
        "\uD835\uDE0A",
        "C"
    ],
    [
        "\uD835\uDE0B",
        "D"
    ],
    [
        "\uD835\uDE0C",
        "E"
    ],
    [
        "\uD835\uDE0D",
        "F"
    ],
    [
        "\uD835\uDE0E",
        "G"
    ],
    [
        "\uD835\uDE0F",
        "H"
    ],
    [
        "\uD835\uDE10",
        "I"
    ],
    [
        "\uD835\uDE11",
        "J"
    ],
    [
        "\uD835\uDE12",
        "K"
    ],
    [
        "\uD835\uDE13",
        "L"
    ],
    [
        "\uD835\uDE14",
        "M"
    ],
    [
        "\uD835\uDE15",
        "N"
    ],
    [
        "\uD835\uDE16",
        "O"
    ],
    [
        "\uD835\uDE17",
        "P"
    ],
    [
        "\uD835\uDE18",
        "Q"
    ],
    [
        "\uD835\uDE19",
        "R"
    ],
    [
        "\uD835\uDE1A",
        "S"
    ],
    [
        "\uD835\uDE1B",
        "T"
    ],
    [
        "\uD835\uDE1C",
        "U"
    ],
    [
        "\uD835\uDE1D",
        "V"
    ],
    [
        "\uD835\uDE1E",
        "W"
    ],
    [
        "\uD835\uDE1F",
        "X"
    ],
    [
        "\uD835\uDE20",
        "Y"
    ],
    [
        "\uD835\uDE21",
        "Z"
    ],
    [
        "\uD835\uDE22",
        "a"
    ],
    [
        "\uD835\uDE23",
        "b"
    ],
    [
        "\uD835\uDE24",
        "c"
    ],
    [
        "\uD835\uDE25",
        "d"
    ],
    [
        "\uD835\uDE26",
        "e"
    ],
    [
        "\uD835\uDE27",
        "f"
    ],
    [
        "\uD835\uDE28",
        "g"
    ],
    [
        "\uD835\uDE29",
        "h"
    ],
    [
        "\uD835\uDE2A",
        "i"
    ],
    [
        "\uD835\uDE2B",
        "j"
    ],
    [
        "\uD835\uDE2C",
        "k"
    ],
    [
        "\uD835\uDE2D",
        "l"
    ],
    [
        "\uD835\uDE2E",
        "m"
    ],
    [
        "\uD835\uDE2F",
        "n"
    ],
    [
        "\uD835\uDE30",
        "o"
    ],
    [
        "\uD835\uDE31",
        "p"
    ],
    [
        "\uD835\uDE32",
        "q"
    ],
    [
        "\uD835\uDE33",
        "r"
    ],
    [
        "\uD835\uDE34",
        "s"
    ],
    [
        "\uD835\uDE35",
        "t"
    ],
    [
        "\uD835\uDE36",
        "u"
    ],
    [
        "\uD835\uDE37",
        "v"
    ],
    [
        "\uD835\uDE38",
        "w"
    ],
    [
        "\uD835\uDE39",
        "x"
    ],
    [
        "\uD835\uDE3A",
        "y"
    ],
    [
        "\uD835\uDE3B",
        "z"
    ],
    [
        "\uD835\uDE3C",
        "A"
    ],
    [
        "\uD835\uDE3D",
        "B"
    ],
    [
        "\uD835\uDE3E",
        "C"
    ],
    [
        "\uD835\uDE3F",
        "D"
    ],
    [
        "\uD835\uDE40",
        "E"
    ],
    [
        "\uD835\uDE41",
        "F"
    ],
    [
        "\uD835\uDE42",
        "G"
    ],
    [
        "\uD835\uDE43",
        "H"
    ],
    [
        "\uD835\uDE44",
        "I"
    ],
    [
        "\uD835\uDE45",
        "J"
    ],
    [
        "\uD835\uDE46",
        "K"
    ],
    [
        "\uD835\uDE47",
        "L"
    ],
    [
        "\uD835\uDE48",
        "M"
    ],
    [
        "\uD835\uDE49",
        "N"
    ],
    [
        "\uD835\uDE4A",
        "O"
    ],
    [
        "\uD835\uDE4B",
        "P"
    ],
    [
        "\uD835\uDE4C",
        "Q"
    ],
    [
        "\uD835\uDE4D",
        "R"
    ],
    [
        "\uD835\uDE4E",
        "S"
    ],
    [
        "\uD835\uDE4F",
        "T"
    ],
    [
        "\uD835\uDE50",
        "U"
    ],
    [
        "\uD835\uDE51",
        "V"
    ],
    [
        "\uD835\uDE52",
        "W"
    ],
    [
        "\uD835\uDE53",
        "X"
    ],
    [
        "\uD835\uDE54",
        "Y"
    ],
    [
        "\uD835\uDE55",
        "Z"
    ],
    [
        "\uD835\uDE56",
        "a"
    ],
    [
        "\uD835\uDE57",
        "b"
    ],
    [
        "\uD835\uDE58",
        "c"
    ],
    [
        "\uD835\uDE59",
        "d"
    ],
    [
        "\uD835\uDE5A",
        "e"
    ],
    [
        "\uD835\uDE5B",
        "f"
    ],
    [
        "\uD835\uDE5C",
        "g"
    ],
    [
        "\uD835\uDE5D",
        "h"
    ],
    [
        "\uD835\uDE5E",
        "i"
    ],
    [
        "\uD835\uDE5F",
        "j"
    ],
    [
        "\uD835\uDE60",
        "k"
    ],
    [
        "\uD835\uDE61",
        "l"
    ],
    [
        "\uD835\uDE62",
        "m"
    ],
    [
        "\uD835\uDE63",
        "n"
    ],
    [
        "\uD835\uDE64",
        "o"
    ],
    [
        "\uD835\uDE65",
        "p"
    ],
    [
        "\uD835\uDE66",
        "q"
    ],
    [
        "\uD835\uDE67",
        "r"
    ],
    [
        "\uD835\uDE68",
        "s"
    ],
    [
        "\uD835\uDE69",
        "t"
    ],
    [
        "\uD835\uDE6A",
        "u"
    ],
    [
        "\uD835\uDE6B",
        "v"
    ],
    [
        "\uD835\uDE6C",
        "w"
    ],
    [
        "\uD835\uDE6D",
        "x"
    ],
    [
        "\uD835\uDE6E",
        "y"
    ],
    [
        "\uD835\uDE6F",
        "z"
    ],
    [
        "\uD835\uDE70",
        "A"
    ],
    [
        "\uD835\uDE71",
        "B"
    ],
    [
        "\uD835\uDE72",
        "C"
    ],
    [
        "\uD835\uDE73",
        "D"
    ],
    [
        "\uD835\uDE74",
        "E"
    ],
    [
        "\uD835\uDE75",
        "F"
    ],
    [
        "\uD835\uDE76",
        "G"
    ],
    [
        "\uD835\uDE77",
        "H"
    ],
    [
        "\uD835\uDE78",
        "I"
    ],
    [
        "\uD835\uDE79",
        "J"
    ],
    [
        "\uD835\uDE7A",
        "K"
    ],
    [
        "\uD835\uDE7B",
        "L"
    ],
    [
        "\uD835\uDE7C",
        "M"
    ],
    [
        "\uD835\uDE7D",
        "N"
    ],
    [
        "\uD835\uDE7E",
        "O"
    ],
    [
        "\uD835\uDE7F",
        "P"
    ],
    [
        "\uD835\uDE80",
        "Q"
    ],
    [
        "\uD835\uDE81",
        "R"
    ],
    [
        "\uD835\uDE82",
        "S"
    ],
    [
        "\uD835\uDE83",
        "T"
    ],
    [
        "\uD835\uDE84",
        "U"
    ],
    [
        "\uD835\uDE85",
        "V"
    ],
    [
        "\uD835\uDE86",
        "W"
    ],
    [
        "\uD835\uDE87",
        "X"
    ],
    [
        "\uD835\uDE88",
        "Y"
    ],
    [
        "\uD835\uDE89",
        "Z"
    ],
    [
        "\uD835\uDE8A",
        "a"
    ],
    [
        "\uD835\uDE8B",
        "b"
    ],
    [
        "\uD835\uDE8C",
        "c"
    ],
    [
        "\uD835\uDE8D",
        "d"
    ],
    [
        "\uD835\uDE8E",
        "e"
    ],
    [
        "\uD835\uDE8F",
        "f"
    ],
    [
        "\uD835\uDE90",
        "g"
    ],
    [
        "\uD835\uDE91",
        "h"
    ],
    [
        "\uD835\uDE92",
        "i"
    ],
    [
        "\uD835\uDE93",
        "j"
    ],
    [
        "\uD835\uDE94",
        "k"
    ],
    [
        "\uD835\uDE95",
        "l"
    ],
    [
        "\uD835\uDE96",
        "m"
    ],
    [
        "\uD835\uDE97",
        "n"
    ],
    [
        "\uD835\uDE98",
        "o"
    ],
    [
        "\uD835\uDE99",
        "p"
    ],
    [
        "\uD835\uDE9A",
        "q"
    ],
    [
        "\uD835\uDE9B",
        "r"
    ],
    [
        "\uD835\uDE9C",
        "s"
    ],
    [
        "\uD835\uDE9D",
        "t"
    ],
    [
        "\uD835\uDE9E",
        "u"
    ],
    [
        "\uD835\uDE9F",
        "v"
    ],
    [
        "\uD835\uDEA0",
        "w"
    ],
    [
        "\uD835\uDEA1",
        "x"
    ],
    [
        "\uD835\uDEA2",
        "y"
    ],
    [
        "\uD835\uDEA3",
        "z"
    ],
    [
        "\uD835\uDEA4",
        "l"
    ],
    [
        "\uD835\uDEA5",
        "j"
    ],
    [
        "\uD835\uDEE2",
        "A"
    ],
    [
        "\uD835\uDEE3",
        "B"
    ],
    [
        "\uD835\uDEE4",
        "G"
    ],
    [
        "\uD835\uDEE5",
        "D"
    ],
    [
        "\uD835\uDEE6",
        "E"
    ],
    [
        "\uD835\uDEE7",
        "Z"
    ],
    [
        "\uD835\uDEE8",
        "I"
    ],
    [
        "\uD835\uDEE9",
        "TH"
    ],
    [
        "\uD835\uDEEA",
        "I"
    ],
    [
        "\uD835\uDEEB",
        "K"
    ],
    [
        "\uD835\uDEEC",
        "L"
    ],
    [
        "\uD835\uDEED",
        "M"
    ],
    [
        "\uD835\uDEEE",
        "N"
    ],
    [
        "\uD835\uDEEF",
        "KS"
    ],
    [
        "\uD835\uDEF0",
        "O"
    ],
    [
        "\uD835\uDEF1",
        "P"
    ],
    [
        "\uD835\uDEF2",
        "R"
    ],
    [
        "\uD835\uDEF3",
        "TH"
    ],
    [
        "\uD835\uDEF4",
        "S"
    ],
    [
        "\uD835\uDEF5",
        "T"
    ],
    [
        "\uD835\uDEF6",
        "Y"
    ],
    [
        "\uD835\uDEF7",
        "F"
    ],
    [
        "\uD835\uDEF8",
        "x"
    ],
    [
        "\uD835\uDEF9",
        "PS"
    ],
    [
        "\uD835\uDEFA",
        "O"
    ],
    [
        "\uD835\uDEFB",
        "D"
    ],
    [
        "\uD835\uDEFC",
        "a"
    ],
    [
        "\uD835\uDEFD",
        "b"
    ],
    [
        "\uD835\uDEFE",
        "g"
    ],
    [
        "\uD835\uDEFF",
        "d"
    ],
    [
        "\uD835\uDF00",
        "e"
    ],
    [
        "\uD835\uDF01",
        "z"
    ],
    [
        "\uD835\uDF02",
        "i"
    ],
    [
        "\uD835\uDF03",
        "th"
    ],
    [
        "\uD835\uDF04",
        "i"
    ],
    [
        "\uD835\uDF05",
        "k"
    ],
    [
        "\uD835\uDF06",
        "l"
    ],
    [
        "\uD835\uDF07",
        "m"
    ],
    [
        "\uD835\uDF08",
        "n"
    ],
    [
        "\uD835\uDF09",
        "ks"
    ],
    [
        "\uD835\uDF0A",
        "o"
    ],
    [
        "\uD835\uDF0B",
        "p"
    ],
    [
        "\uD835\uDF0C",
        "r"
    ],
    [
        "\uD835\uDF0D",
        "s"
    ],
    [
        "\uD835\uDF0E",
        "s"
    ],
    [
        "\uD835\uDF0F",
        "t"
    ],
    [
        "\uD835\uDF10",
        "y"
    ],
    [
        "\uD835\uDF11",
        "f"
    ],
    [
        "\uD835\uDF12",
        "x"
    ],
    [
        "\uD835\uDF13",
        "ps"
    ],
    [
        "\uD835\uDF14",
        "o"
    ],
    [
        "\uD835\uDF15",
        "d"
    ],
    [
        "\uD835\uDF16",
        "E"
    ],
    [
        "\uD835\uDF17",
        "TH"
    ],
    [
        "\uD835\uDF18",
        "K"
    ],
    [
        "\uD835\uDF19",
        "f"
    ],
    [
        "\uD835\uDF1A",
        "r"
    ],
    [
        "\uD835\uDF1B",
        "p"
    ],
    [
        "\uD835\uDF1C",
        "A"
    ],
    [
        "\uD835\uDF1D",
        "V"
    ],
    [
        "\uD835\uDF1E",
        "G"
    ],
    [
        "\uD835\uDF1F",
        "D"
    ],
    [
        "\uD835\uDF20",
        "E"
    ],
    [
        "\uD835\uDF21",
        "Z"
    ],
    [
        "\uD835\uDF22",
        "I"
    ],
    [
        "\uD835\uDF23",
        "TH"
    ],
    [
        "\uD835\uDF24",
        "I"
    ],
    [
        "\uD835\uDF25",
        "K"
    ],
    [
        "\uD835\uDF26",
        "L"
    ],
    [
        "\uD835\uDF27",
        "M"
    ],
    [
        "\uD835\uDF28",
        "N"
    ],
    [
        "\uD835\uDF29",
        "KS"
    ],
    [
        "\uD835\uDF2A",
        "O"
    ],
    [
        "\uD835\uDF2B",
        "P"
    ],
    [
        "\uD835\uDF2C",
        "S"
    ],
    [
        "\uD835\uDF2D",
        "TH"
    ],
    [
        "\uD835\uDF2E",
        "S"
    ],
    [
        "\uD835\uDF2F",
        "T"
    ],
    [
        "\uD835\uDF30",
        "Y"
    ],
    [
        "\uD835\uDF31",
        "F"
    ],
    [
        "\uD835\uDF32",
        "X"
    ],
    [
        "\uD835\uDF33",
        "PS"
    ],
    [
        "\uD835\uDF34",
        "O"
    ],
    [
        "\uD835\uDF35",
        "D"
    ],
    [
        "\uD835\uDF36",
        "a"
    ],
    [
        "\uD835\uDF37",
        "v"
    ],
    [
        "\uD835\uDF38",
        "g"
    ],
    [
        "\uD835\uDF39",
        "d"
    ],
    [
        "\uD835\uDF3A",
        "e"
    ],
    [
        "\uD835\uDF3B",
        "z"
    ],
    [
        "\uD835\uDF3C",
        "i"
    ],
    [
        "\uD835\uDF3D",
        "th"
    ],
    [
        "\uD835\uDF3E",
        "i"
    ],
    [
        "\uD835\uDF3F",
        "k"
    ],
    [
        "\uD835\uDF40",
        "l"
    ],
    [
        "\uD835\uDF41",
        "m"
    ],
    [
        "\uD835\uDF42",
        "n"
    ],
    [
        "\uD835\uDF43",
        "ks"
    ],
    [
        "\uD835\uDF44",
        "o"
    ],
    [
        "\uD835\uDF45",
        "p"
    ],
    [
        "\uD835\uDF46",
        "r"
    ],
    [
        "\uD835\uDF47",
        "s"
    ],
    [
        "\uD835\uDF48",
        "s"
    ],
    [
        "\uD835\uDF49",
        "t"
    ],
    [
        "\uD835\uDF4A",
        "y"
    ],
    [
        "\uD835\uDF4B",
        "f"
    ],
    [
        "\uD835\uDF4C",
        "x"
    ],
    [
        "\uD835\uDF4D",
        "ps"
    ],
    [
        "\uD835\uDF4E",
        "o"
    ],
    [
        "\uD835\uDF4F",
        "a"
    ],
    [
        "\uD835\uDF50",
        "e"
    ],
    [
        "\uD835\uDF51",
        "i"
    ],
    [
        "\uD835\uDF52",
        "k"
    ],
    [
        "\uD835\uDF53",
        "f"
    ],
    [
        "\uD835\uDF54",
        "r"
    ],
    [
        "\uD835\uDF55",
        "p"
    ],
    [
        "\uD835\uDF56",
        "A"
    ],
    [
        "\uD835\uDF57",
        "B"
    ],
    [
        "\uD835\uDF58",
        "G"
    ],
    [
        "\uD835\uDF59",
        "D"
    ],
    [
        "\uD835\uDF5A",
        "E"
    ],
    [
        "\uD835\uDF5B",
        "Z"
    ],
    [
        "\uD835\uDF5C",
        "I"
    ],
    [
        "\uD835\uDF5D",
        "TH"
    ],
    [
        "\uD835\uDF5E",
        "I"
    ],
    [
        "\uD835\uDF5F",
        "K"
    ],
    [
        "\uD835\uDF60",
        "L"
    ],
    [
        "\uD835\uDF61",
        "M"
    ],
    [
        "\uD835\uDF62",
        "N"
    ],
    [
        "\uD835\uDF63",
        "KS"
    ],
    [
        "\uD835\uDF64",
        "O"
    ],
    [
        "\uD835\uDF65",
        "P"
    ],
    [
        "\uD835\uDF66",
        "R"
    ],
    [
        "\uD835\uDF67",
        "TH"
    ],
    [
        "\uD835\uDF68",
        "S"
    ],
    [
        "\uD835\uDF69",
        "T"
    ],
    [
        "\uD835\uDF6A",
        "Y"
    ],
    [
        "\uD835\uDF6B",
        "F"
    ],
    [
        "\uD835\uDF6C",
        "X"
    ],
    [
        "\uD835\uDF6D",
        "PS"
    ],
    [
        "\uD835\uDF6E",
        "O"
    ],
    [
        "\uD835\uDF6F",
        "D"
    ],
    [
        "\uD835\uDF70",
        "a"
    ],
    [
        "\uD835\uDF71",
        "v"
    ],
    [
        "\uD835\uDF72",
        "g"
    ],
    [
        "\uD835\uDF73",
        "d"
    ],
    [
        "\uD835\uDF74",
        "e"
    ],
    [
        "\uD835\uDF75",
        "z"
    ],
    [
        "\uD835\uDF76",
        "i"
    ],
    [
        "\uD835\uDF77",
        "th"
    ],
    [
        "\uD835\uDF78",
        "i"
    ],
    [
        "\uD835\uDF79",
        "k"
    ],
    [
        "\uD835\uDF7A",
        "l"
    ],
    [
        "\uD835\uDF7B",
        "m"
    ],
    [
        "\uD835\uDF7C",
        "n"
    ],
    [
        "\uD835\uDF7D",
        "ks"
    ],
    [
        "\uD835\uDF7E",
        "o"
    ],
    [
        "\uD835\uDF7F",
        "p"
    ],
    [
        "\uD835\uDF80",
        "r"
    ],
    [
        "\uD835\uDF81",
        "s"
    ],
    [
        "\uD835\uDF82",
        "s"
    ],
    [
        "\uD835\uDF83",
        "t"
    ],
    [
        "\uD835\uDF84",
        "y"
    ],
    [
        "\uD835\uDF85",
        "f"
    ],
    [
        "\uD835\uDF86",
        "x"
    ],
    [
        "\uD835\uDF87",
        "ps"
    ],
    [
        "\uD835\uDF88",
        "o"
    ],
    [
        "\uD835\uDF89",
        "a"
    ],
    [
        "\uD835\uDF8A",
        "e"
    ],
    [
        "\uD835\uDF8B",
        "i"
    ],
    [
        "\uD835\uDF8C",
        "k"
    ],
    [
        "\uD835\uDF8D",
        "f"
    ],
    [
        "\uD835\uDF8E",
        "r"
    ],
    [
        "\uD835\uDF8F",
        "p"
    ],
    [
        "\uD835\uDF90",
        "A"
    ],
    [
        "\uD835\uDF91",
        "V"
    ],
    [
        "\uD835\uDF92",
        "G"
    ],
    [
        "\uD835\uDF93",
        "D"
    ],
    [
        "\uD835\uDF94",
        "E"
    ],
    [
        "\uD835\uDF95",
        "Z"
    ],
    [
        "\uD835\uDF96",
        "I"
    ],
    [
        "\uD835\uDF97",
        "TH"
    ],
    [
        "\uD835\uDF98",
        "I"
    ],
    [
        "\uD835\uDF99",
        "K"
    ],
    [
        "\uD835\uDF9A",
        "L"
    ],
    [
        "\uD835\uDF9B",
        "M"
    ],
    [
        "\uD835\uDF9C",
        "N"
    ],
    [
        "\uD835\uDF9D",
        "KS"
    ],
    [
        "\uD835\uDF9E",
        "O"
    ],
    [
        "\uD835\uDF9F",
        "P"
    ],
    [
        "\uD835\uDFA0",
        "S"
    ],
    [
        "\uD835\uDFA1",
        "TH"
    ],
    [
        "\uD835\uDFA2",
        "S"
    ],
    [
        "\uD835\uDFA3",
        "T"
    ],
    [
        "\uD835\uDFA4",
        "Y"
    ],
    [
        "\uD835\uDFA5",
        "F"
    ],
    [
        "\uD835\uDFA6",
        "X"
    ],
    [
        "\uD835\uDFA7",
        "PS"
    ],
    [
        "\uD835\uDFA8",
        "O"
    ],
    [
        "\uD835\uDFA9",
        "D"
    ],
    [
        "\uD835\uDFAA",
        "av"
    ],
    [
        "\uD835\uDFAB",
        "g"
    ],
    [
        "\uD835\uDFAC",
        "d"
    ],
    [
        "\uD835\uDFAD",
        "e"
    ],
    [
        "\uD835\uDFAE",
        "z"
    ],
    [
        "\uD835\uDFAF",
        "i"
    ],
    [
        "\uD835\uDFB0",
        "i"
    ],
    [
        "\uD835\uDFB1",
        "th"
    ],
    [
        "\uD835\uDFB2",
        "i"
    ],
    [
        "\uD835\uDFB3",
        "k"
    ],
    [
        "\uD835\uDFB4",
        "l"
    ],
    [
        "\uD835\uDFB5",
        "m"
    ],
    [
        "\uD835\uDFB6",
        "n"
    ],
    [
        "\uD835\uDFB7",
        "ks"
    ],
    [
        "\uD835\uDFB8",
        "o"
    ],
    [
        "\uD835\uDFB9",
        "p"
    ],
    [
        "\uD835\uDFBA",
        "r"
    ],
    [
        "\uD835\uDFBB",
        "s"
    ],
    [
        "\uD835\uDFBC",
        "s"
    ],
    [
        "\uD835\uDFBD",
        "t"
    ],
    [
        "\uD835\uDFBE",
        "y"
    ],
    [
        "\uD835\uDFBF",
        "f"
    ],
    [
        "\uD835\uDFC0",
        "x"
    ],
    [
        "\uD835\uDFC1",
        "ps"
    ],
    [
        "\uD835\uDFC2",
        "o"
    ],
    [
        "\uD835\uDFC3",
        "a"
    ],
    [
        "\uD835\uDFC4",
        "e"
    ],
    [
        "\uD835\uDFC5",
        "i"
    ],
    [
        "\uD835\uDFC6",
        "k"
    ],
    [
        "\uD835\uDFC7",
        "f"
    ],
    [
        "\uD835\uDFC8",
        "r"
    ],
    [
        "\uD835\uDFC9",
        "p"
    ],
    [
        "\uD835\uDFCA",
        "F"
    ],
    [
        "\uD835\uDFCB",
        "f"
    ],
    [
        "\u249C",
        "(a)"
    ],
    [
        "\u249D",
        "(b)"
    ],
    [
        "\u249E",
        "(c)"
    ],
    [
        "\u249F",
        "(d)"
    ],
    [
        "\u24A0",
        "(e)"
    ],
    [
        "\u24A1",
        "(f)"
    ],
    [
        "\u24A2",
        "(g)"
    ],
    [
        "\u24A3",
        "(h)"
    ],
    [
        "\u24A4",
        "(i)"
    ],
    [
        "\u24A5",
        "(j)"
    ],
    [
        "\u24A6",
        "(k)"
    ],
    [
        "\u24A7",
        "(l)"
    ],
    [
        "\u24A8",
        "(m)"
    ],
    [
        "\u24A9",
        "(n)"
    ],
    [
        "\u24AA",
        "(o)"
    ],
    [
        "\u24AB",
        "(p)"
    ],
    [
        "\u24AC",
        "(q)"
    ],
    [
        "\u24AD",
        "(r)"
    ],
    [
        "\u24AE",
        "(s)"
    ],
    [
        "\u24AF",
        "(t)"
    ],
    [
        "\u24B0",
        "(u)"
    ],
    [
        "\u24B1",
        "(v)"
    ],
    [
        "\u24B2",
        "(w)"
    ],
    [
        "\u24B3",
        "(x)"
    ],
    [
        "\u24B4",
        "(y)"
    ],
    [
        "\u24B5",
        "(z)"
    ],
    [
        "\u24B6",
        "(A)"
    ],
    [
        "\u24B7",
        "(B)"
    ],
    [
        "\u24B8",
        "(C)"
    ],
    [
        "\u24B9",
        "(D)"
    ],
    [
        "\u24BA",
        "(E)"
    ],
    [
        "\u24BB",
        "(F)"
    ],
    [
        "\u24BC",
        "(G)"
    ],
    [
        "\u24BD",
        "(H)"
    ],
    [
        "\u24BE",
        "(I)"
    ],
    [
        "\u24BF",
        "(J)"
    ],
    [
        "\u24C0",
        "(K)"
    ],
    [
        "\u24C1",
        "(L)"
    ],
    [
        "\u24C3",
        "(N)"
    ],
    [
        "\u24C4",
        "(O)"
    ],
    [
        "\u24C5",
        "(P)"
    ],
    [
        "\u24C6",
        "(Q)"
    ],
    [
        "\u24C7",
        "(R)"
    ],
    [
        "\u24C8",
        "(S)"
    ],
    [
        "\u24C9",
        "(T)"
    ],
    [
        "\u24CA",
        "(U)"
    ],
    [
        "\u24CB",
        "(V)"
    ],
    [
        "\u24CC",
        "(W)"
    ],
    [
        "\u24CD",
        "(X)"
    ],
    [
        "\u24CE",
        "(Y)"
    ],
    [
        "\u24CF",
        "(Z)"
    ],
    [
        "\u24D0",
        "(a)"
    ],
    [
        "\u24D1",
        "(b)"
    ],
    [
        "\u24D2",
        "(b)"
    ],
    [
        "\u24D3",
        "(c)"
    ],
    [
        "\u24D4",
        "(e)"
    ],
    [
        "\u24D5",
        "(f)"
    ],
    [
        "\u24D6",
        "(g)"
    ],
    [
        "\u24D7",
        "(h)"
    ],
    [
        "\u24D8",
        "(i)"
    ],
    [
        "\u24D9",
        "(j)"
    ],
    [
        "\u24DA",
        "(k)"
    ],
    [
        "\u24DB",
        "(l)"
    ],
    [
        "\u24DC",
        "(m)"
    ],
    [
        "\u24DD",
        "(n)"
    ],
    [
        "\u24DE",
        "(o)"
    ],
    [
        "\u24DF",
        "(p)"
    ],
    [
        "\u24E0",
        "(q)"
    ],
    [
        "\u24E1",
        "(r)"
    ],
    [
        "\u24E2",
        "(s)"
    ],
    [
        "\u24E3",
        "(t)"
    ],
    [
        "\u24E4",
        "(u)"
    ],
    [
        "\u24E5",
        "(v)"
    ],
    [
        "\u24E6",
        "(w)"
    ],
    [
        "\u24E7",
        "(x)"
    ],
    [
        "\u24E8",
        "(y)"
    ],
    [
        "\u24E9",
        "(z)"
    ],
    [
        "\u010A",
        "C"
    ],
    [
        "\u010B",
        "c"
    ],
    [
        "\u0120",
        "G"
    ],
    [
        "\u0121",
        "g"
    ],
    [
        "\u0126",
        "H"
    ],
    [
        "\u0127",
        "h"
    ],
    [
        "\u017B",
        "Z"
    ],
    [
        "\u017C",
        "z"
    ],
    [
        "\uD835\uDFCE",
        "0"
    ],
    [
        "\uD835\uDFCF",
        "1"
    ],
    [
        "\uD835\uDFD0",
        "2"
    ],
    [
        "\uD835\uDFD1",
        "3"
    ],
    [
        "\uD835\uDFD2",
        "4"
    ],
    [
        "\uD835\uDFD3",
        "5"
    ],
    [
        "\uD835\uDFD4",
        "6"
    ],
    [
        "\uD835\uDFD5",
        "7"
    ],
    [
        "\uD835\uDFD6",
        "8"
    ],
    [
        "\uD835\uDFD7",
        "9"
    ],
    [
        "\uD835\uDFD8",
        "0"
    ],
    [
        "\uD835\uDFD9",
        "1"
    ],
    [
        "\uD835\uDFDA",
        "2"
    ],
    [
        "\uD835\uDFDB",
        "3"
    ],
    [
        "\uD835\uDFDC",
        "4"
    ],
    [
        "\uD835\uDFDD",
        "5"
    ],
    [
        "\uD835\uDFDE",
        "6"
    ],
    [
        "\uD835\uDFDF",
        "7"
    ],
    [
        "\uD835\uDFE0",
        "8"
    ],
    [
        "\uD835\uDFE1",
        "9"
    ],
    [
        "\uD835\uDFE2",
        "0"
    ],
    [
        "\uD835\uDFE3",
        "1"
    ],
    [
        "\uD835\uDFE4",
        "2"
    ],
    [
        "\uD835\uDFE5",
        "3"
    ],
    [
        "\uD835\uDFE6",
        "4"
    ],
    [
        "\uD835\uDFE7",
        "5"
    ],
    [
        "\uD835\uDFE8",
        "6"
    ],
    [
        "\uD835\uDFE9",
        "7"
    ],
    [
        "\uD835\uDFEA",
        "8"
    ],
    [
        "\uD835\uDFEB",
        "9"
    ],
    [
        "\uD835\uDFEC",
        "0"
    ],
    [
        "\uD835\uDFED",
        "1"
    ],
    [
        "\uD835\uDFEE",
        "2"
    ],
    [
        "\uD835\uDFEF",
        "3"
    ],
    [
        "\uD835\uDFF0",
        "4"
    ],
    [
        "\uD835\uDFF1",
        "5"
    ],
    [
        "\uD835\uDFF2",
        "6"
    ],
    [
        "\uD835\uDFF3",
        "7"
    ],
    [
        "\uD835\uDFF4",
        "8"
    ],
    [
        "\uD835\uDFF5",
        "9"
    ],
    [
        "\uD835\uDFF6",
        "0"
    ],
    [
        "\uD835\uDFF7",
        "1"
    ],
    [
        "\uD835\uDFF8",
        "2"
    ],
    [
        "\uD835\uDFF9",
        "3"
    ],
    [
        "\uD835\uDFFA",
        "4"
    ],
    [
        "\uD835\uDFFB",
        "5"
    ],
    [
        "\uD835\uDFFC",
        "6"
    ],
    [
        "\uD835\uDFFD",
        "7"
    ],
    [
        "\uD835\uDFFE",
        "8"
    ],
    [
        "\uD835\uDFFF",
        "9"
    ],
    [
        "\u2460",
        "1"
    ],
    [
        "\u2461",
        "2"
    ],
    [
        "\u2462",
        "3"
    ],
    [
        "\u2463",
        "4"
    ],
    [
        "\u2464",
        "5"
    ],
    [
        "\u2465",
        "6"
    ],
    [
        "\u2466",
        "7"
    ],
    [
        "\u2467",
        "8"
    ],
    [
        "\u2468",
        "9"
    ],
    [
        "\u2469",
        "10"
    ],
    [
        "\u246A",
        "11"
    ],
    [
        "\u246B",
        "12"
    ],
    [
        "\u246C",
        "13"
    ],
    [
        "\u246D",
        "14"
    ],
    [
        "\u246E",
        "15"
    ],
    [
        "\u246F",
        "16"
    ],
    [
        "\u2470",
        "17"
    ],
    [
        "\u2471",
        "18"
    ],
    [
        "\u2472",
        "19"
    ],
    [
        "\u2473",
        "20"
    ],
    [
        "\u2474",
        "1"
    ],
    [
        "\u2475",
        "2"
    ],
    [
        "\u2476",
        "3"
    ],
    [
        "\u2477",
        "4"
    ],
    [
        "\u2478",
        "5"
    ],
    [
        "\u2479",
        "6"
    ],
    [
        "\u247A",
        "7"
    ],
    [
        "\u247B",
        "8"
    ],
    [
        "\u247C",
        "9"
    ],
    [
        "\u247D",
        "10"
    ],
    [
        "\u247E",
        "11"
    ],
    [
        "\u247F",
        "12"
    ],
    [
        "\u2480",
        "13"
    ],
    [
        "\u2481",
        "14"
    ],
    [
        "\u2482",
        "15"
    ],
    [
        "\u2483",
        "16"
    ],
    [
        "\u2484",
        "17"
    ],
    [
        "\u2485",
        "18"
    ],
    [
        "\u2486",
        "19"
    ],
    [
        "\u2487",
        "20"
    ],
    [
        "\u2488",
        "1."
    ],
    [
        "\u2489",
        "2."
    ],
    [
        "\u248A",
        "3."
    ],
    [
        "\u248B",
        "4."
    ],
    [
        "\u248C",
        "5."
    ],
    [
        "\u248D",
        "6."
    ],
    [
        "\u248E",
        "7."
    ],
    [
        "\u248F",
        "8."
    ],
    [
        "\u2490",
        "9."
    ],
    [
        "\u2491",
        "10."
    ],
    [
        "\u2492",
        "11."
    ],
    [
        "\u2493",
        "12."
    ],
    [
        "\u2494",
        "13."
    ],
    [
        "\u2495",
        "14."
    ],
    [
        "\u2496",
        "15."
    ],
    [
        "\u2497",
        "16."
    ],
    [
        "\u2498",
        "17."
    ],
    [
        "\u2499",
        "18."
    ],
    [
        "\u249A",
        "19."
    ],
    [
        "\u249B",
        "20."
    ],
    [
        "\u24EA",
        "0"
    ],
    [
        "\u24EB",
        "11"
    ],
    [
        "\u24EC",
        "12"
    ],
    [
        "\u24ED",
        "13"
    ],
    [
        "\u24EE",
        "14"
    ],
    [
        "\u24EF",
        "15"
    ],
    [
        "\u24F0",
        "16"
    ],
    [
        "\u24F1",
        "17"
    ],
    [
        "\u24F2",
        "18"
    ],
    [
        "\u24F3",
        "19"
    ],
    [
        "\u24F4",
        "20"
    ],
    [
        "\u24F5",
        "1"
    ],
    [
        "\u24F6",
        "2"
    ],
    [
        "\u24F7",
        "3"
    ],
    [
        "\u24F8",
        "4"
    ],
    [
        "\u24F9",
        "5"
    ],
    [
        "\u24FA",
        "6"
    ],
    [
        "\u24FB",
        "7"
    ],
    [
        "\u24FC",
        "8"
    ],
    [
        "\u24FD",
        "9"
    ],
    [
        "\u24FE",
        "10"
    ],
    [
        "\u24FF",
        "0"
    ],
    [
        "\uD83D\uDE70",
        "&"
    ],
    [
        "\uD83D\uDE71",
        "&"
    ],
    [
        "\uD83D\uDE72",
        "&"
    ],
    [
        "\uD83D\uDE73",
        "&"
    ],
    [
        "\uD83D\uDE74",
        "&"
    ],
    [
        "\uD83D\uDE75",
        "&"
    ],
    [
        "\uD83D\uDE76",
        '"'
    ],
    [
        "\uD83D\uDE77",
        '"'
    ],
    [
        "\uD83D\uDE78",
        '"'
    ],
    [
        "\u203D",
        "?!"
    ],
    [
        "\uD83D\uDE79",
        "?!"
    ],
    [
        "\uD83D\uDE7A",
        "?!"
    ],
    [
        "\uD83D\uDE7B",
        "?!"
    ],
    [
        "\uD83D\uDE7C",
        "/"
    ],
    [
        "\uD83D\uDE7D",
        "\\"
    ],
    [
        "\uD83D\uDF07",
        "AR"
    ],
    [
        "\uD83D\uDF08",
        "V"
    ],
    [
        "\uD83D\uDF09",
        "V"
    ],
    [
        "\uD83D\uDF06",
        "VR"
    ],
    [
        "\uD83D\uDF05",
        "VF"
    ],
    [
        "\uD83D\uDF29",
        "2"
    ],
    [
        "\uD83D\uDF2A",
        "5"
    ],
    [
        "\uD83D\uDF61",
        "f"
    ],
    [
        "\uD83D\uDF62",
        "W"
    ],
    [
        "\uD83D\uDF63",
        "U"
    ],
    [
        "\uD83D\uDF67",
        "V"
    ],
    [
        "\uD83D\uDF68",
        "T"
    ],
    [
        "\uD83D\uDF6A",
        "V"
    ],
    [
        "\uD83D\uDF6B",
        "MB"
    ],
    [
        "\uD83D\uDF6C",
        "VB"
    ],
    [
        "\uD83D\uDF72",
        "3B"
    ],
    [
        "\uD83D\uDF73",
        "3B"
    ],
    [
        "\uD83D\uDCAF",
        "100"
    ],
    [
        "\uD83D\uDD19",
        "BACK"
    ],
    [
        "\uD83D\uDD1A",
        "END"
    ],
    [
        "\uD83D\uDD1B",
        "ON!"
    ],
    [
        "\uD83D\uDD1C",
        "SOON"
    ],
    [
        "\uD83D\uDD1D",
        "TOP"
    ],
    [
        "\uD83D\uDD1E",
        "18"
    ],
    [
        "\uD83D\uDD24",
        "abc"
    ],
    [
        "\uD83D\uDD20",
        "ABCD"
    ],
    [
        "\uD83D\uDD21",
        "abcd"
    ],
    [
        "\uD83D\uDD22",
        "1234"
    ],
    [
        "\uD83D\uDD23",
        "T&@%"
    ],
    [
        "#\uFE0F\u20E3",
        "#"
    ],
    [
        "*\uFE0F\u20E3",
        "*"
    ],
    [
        "0\uFE0F\u20E3",
        "0"
    ],
    [
        "1\uFE0F\u20E3",
        "1"
    ],
    [
        "2\uFE0F\u20E3",
        "2"
    ],
    [
        "3\uFE0F\u20E3",
        "3"
    ],
    [
        "4\uFE0F\u20E3",
        "4"
    ],
    [
        "5\uFE0F\u20E3",
        "5"
    ],
    [
        "6\uFE0F\u20E3",
        "6"
    ],
    [
        "7\uFE0F\u20E3",
        "7"
    ],
    [
        "8\uFE0F\u20E3",
        "8"
    ],
    [
        "9\uFE0F\u20E3",
        "9"
    ],
    [
        "\uD83D\uDD1F",
        "10"
    ],
    [
        "\uD83C\uDD70\uFE0F",
        "A"
    ],
    [
        "\uD83C\uDD71\uFE0F",
        "B"
    ],
    [
        "\uD83C\uDD8E",
        "AB"
    ],
    [
        "\uD83C\uDD91",
        "CL"
    ],
    [
        "\uD83C\uDD7E\uFE0F",
        "O"
    ],
    [
        "\uD83C\uDD7F",
        "P"
    ],
    [
        "\uD83C\uDD98",
        "SOS"
    ],
    [
        "\uD83C\uDD72",
        "C"
    ],
    [
        "\uD83C\uDD73",
        "D"
    ],
    [
        "\uD83C\uDD74",
        "E"
    ],
    [
        "\uD83C\uDD75",
        "F"
    ],
    [
        "\uD83C\uDD76",
        "G"
    ],
    [
        "\uD83C\uDD77",
        "H"
    ],
    [
        "\uD83C\uDD78",
        "I"
    ],
    [
        "\uD83C\uDD79",
        "J"
    ],
    [
        "\uD83C\uDD7A",
        "K"
    ],
    [
        "\uD83C\uDD7B",
        "L"
    ],
    [
        "\uD83C\uDD7C",
        "M"
    ],
    [
        "\uD83C\uDD7D",
        "N"
    ],
    [
        "\uD83C\uDD80",
        "Q"
    ],
    [
        "\uD83C\uDD81",
        "R"
    ],
    [
        "\uD83C\uDD82",
        "S"
    ],
    [
        "\uD83C\uDD83",
        "T"
    ],
    [
        "\uD83C\uDD84",
        "U"
    ],
    [
        "\uD83C\uDD85",
        "V"
    ],
    [
        "\uD83C\uDD86",
        "W"
    ],
    [
        "\uD83C\uDD87",
        "X"
    ],
    [
        "\uD83C\uDD88",
        "Y"
    ],
    [
        "\uD83C\uDD89",
        "Z"
    ]
];
var replacements_default = replacements;
// node_modules/@sindresorhus/transliterate/index.js
var doCustomReplacements = (string, replacements2)=>{
    for (const [key, value] of replacements2){
        string = string.replace(new RegExp(escapeStringRegexp(key), "g"), value);
    }
    return string;
};
function transliterate(string, options) {
    if (typeof string !== "string") {
        throw new TypeError(`Expected a string, got \`${typeof string}\``);
    }
    options = {
        customReplacements: [],
        ...options
    };
    const customReplacements = new Map([
        ...replacements_default,
        ...options.customReplacements
    ]);
    string = string.normalize();
    string = doCustomReplacements(string, customReplacements);
    string = string.normalize("NFD").replace(/\p{Diacritic}/gu, "").normalize();
    return string;
}
// node_modules/@sindresorhus/slugify/overridable-replacements.js
var overridableReplacements = [
    [
        "&",
        " and "
    ],
    [
        "\uD83E\uDD84",
        " unicorn "
    ],
    [
        "\u2665",
        " love "
    ]
];
var overridable_replacements_default = overridableReplacements;
// node_modules/@sindresorhus/slugify/index.js
var decamelize = (string)=>{
    return string.replace(/([A-Z]{2,})(\d+)/g, "$1 $2").replace(/([a-z\d]+)([A-Z]{2,})/g, "$1 $2").replace(/([a-z\d])([A-Z])/g, "$1 $2").replace(/([A-Z]+)([A-Z][a-rt-z\d]+)/g, "$1 $2");
};
var removeMootSeparators = (string, separator)=>{
    const escapedSeparator = escapeStringRegexp(separator);
    return string.replace(new RegExp(`${escapedSeparator}{2,}`, "g"), separator).replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}\$`, "g"), "");
};
var buildPatternSlug = (options)=>{
    let negationSetPattern = "a-z\\d";
    negationSetPattern += options.lowercase ? "" : "A-Z";
    if (options.preserveCharacters.length > 0) {
        for (const character of options.preserveCharacters){
            if (character === options.separator) {
                throw new Error(`The separator character \`${options.separator}\` cannot be included in preserved characters: ${options.preserveCharacters}`);
            }
            negationSetPattern += escapeStringRegexp(character);
        }
    }
    return new RegExp(`[^${negationSetPattern}]+`, "g");
};
function slugify(string, options) {
    if (typeof string !== "string") {
        throw new TypeError(`Expected a string, got \`${typeof string}\``);
    }
    options = {
        separator: "-",
        lowercase: true,
        decamelize: true,
        customReplacements: [],
        preserveLeadingUnderscore: false,
        preserveTrailingDash: false,
        preserveCharacters: [],
        ...options
    };
    const shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith("_");
    const shouldAppendDash = options.preserveTrailingDash && string.endsWith("-");
    const customReplacements = new Map([
        ...overridable_replacements_default,
        ...options.customReplacements
    ]);
    string = transliterate(string, {
        customReplacements
    });
    if (options.decamelize) {
        string = decamelize(string);
    }
    const patternSlug = buildPatternSlug(options);
    if (options.lowercase) {
        string = string.toLowerCase();
    }
    string = string.replace(/([a-zA-Z\d]+)'([ts])(\s|$)/g, "$1$2$3");
    string = string.replace(patternSlug, options.separator);
    string = string.replace(/\\/g, "");
    if (options.separator) {
        string = removeMootSeparators(string, options.separator);
    }
    if (shouldPrependUnderscore) {
        string = `_${string}`;
    }
    if (shouldAppendDash) {
        string = `${string}-`;
    }
    return string;
}
// src/helpers/helpers.ts
function isTruthy(value) {
    return !!value;
}
var range = (start, end)=>{
    const length = end - start + 1;
    return Array.from({
        length
    }, (_, idx)=>idx + start);
};
var sleep = async (delay)=>{
    new Promise((resolve)=>setTimeout(resolve, delay));
};
var getShortcutLabel = ({ key, metaKey })=>{
    const label = `${metaKey ? "\u2318" : ""}${key.toUpperCase()}`;
    return label;
};
var stripHtml = (string)=>{
    return string.replace(/<[^>]*>?/gm, "");
};
var convertNewlines = (string, replacement = " ")=>{
    return string.replace(/\n+/g, replacement);
};
var getExcerpt = (content, length = 250)=>{
    if (!content) {
        return null;
    }
    const plainText = convertNewlines(stripHtml(content));
    const text = plainText.slice(0, length).trim();
    if (text.length < plainText.length) {
        return `${text}...`;
    }
    return text;
};
var slugify2 = (input, decamelize2 = false)=>{
    return slugify(input, {
        decamelize: decamelize2,
        customReplacements: [
            [
                "#",
                "sharp"
            ],
            [
                "+",
                "plus"
            ]
        ]
    });
};
var isCuid = (id)=>{
    return id.length === 25 && id[0] === "c";
};
var getInitials = (value, limit = 0)=>{
    const val = (value || "").trim();
    if (val.length === 0 || val.length === 1 || val.length === 2) {
        return val.toUpperCase();
    }
    const values = val.split(" ").filter(isTruthy);
    const initials = values.map((name)=>name.charAt(0).toUpperCase()).join("");
    if (limit > 0) {
        return initials.slice(0, limit);
    }
    return initials;
};
var toBase64 = (file)=>{
    return new Promise((resolve, reject)=>{
        const reader = new FileReader;
        reader.readAsDataURL(file);
        reader.onload = ()=>resolve(reader.result);
        reader.onerror = (error)=>reject(error);
    });
};
var splitArrayChunks = (array, chunkSize)=>{
    const chunks = [];
    for(let i = 0; i < array.length; i += chunkSize){
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
};
var setInputValue = (input, value, triggerChange = false)=>{
    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, "value")?.set;
    nativeInputValueSetter?.call(input, value);
    triggerChange && input?.dispatchEvent(new Event("input", {
        bubbles: true
    }));
};
// src/http/http.ts
var addHttp = (url)=>{
    return url ? `${url.includes("localhost") ? "http" : "https"}://${url}` : "";
};
var removeHttp = (url)=>{
    return url ? url.replace(/^https?:\/\//, "") : "";
};
var removeTrailingSlash = (url)=>{
    return url ? url.replace(/\/$/, "") : "";
};
var isExternalLink = (url)=>{
    return url ? url.includes("http") : false;
};
// src/numbers/numbers.ts
var keepNumberInRange = (value, min, max)=>{
    if (min !== undefined && max !== undefined) {
        return Math.min(Math.max(value, min), max);
    }
    if (min !== undefined) {
        return Math.max(value, min);
    }
    if (max !== undefined) {
        return Math.min(value, max);
    }
    return value;
};
var parseNumericValue = (value)=>{
    if (value === undefined || value === null) return;
    const parsed = Number.parseFloat(value.toString());
    return Number.isNaN(parsed) ? undefined : parsed;
};
var preciseRound = (value, decimals = 2)=>{
    const factor = Math.pow(10, decimals);
    return Math.round((value + Number.EPSILON) * factor) / factor;
};
// src/objects/objects.ts
var isEmptyObject = (obj = {})=>{
    return obj.constructor === Object && !Object.entries(obj).length;
};
var sortObjectKeys = (keys)=>{
    return (a, b)=>{
        const aIndex = keys.indexOf(Object.keys(a)[0] ?? "");
        const bIndex = keys.indexOf(Object.keys(b)[0] ?? "");
        if (aIndex === -1 && bIndex === -1) return 0;
        if (aIndex === -1) return 1;
        if (bIndex === -1) return -1;
        return aIndex - bIndex;
    };
};
var sortObject = (obj, comparator)=>{
    return Object.keys(obj).sort(comparator).reduce((result, key)=>{
        return {
            ...result,
            [key]: obj[key]
        };
    }, {});
};
// src/params/params.ts
var getSearchParams = (request)=>{
    return Object.fromEntries(new URL(request.url).searchParams);
};
var getCurrentPage = (page)=>{
    return Math.max(page && !Number.isNaN(Number(page)) ? Number.parseInt(page || "1", 10) : 1, 1);
};
var getPageParams = (request, take)=>{
    const { page, ...params } = getSearchParams(request);
    const currentPage = getCurrentPage(page);
    const skip = (currentPage - 1) * take;
    return {
        take,
        skip,
        ...params
    };
};
var getPageLink = (searchParams, pathname, page)=>{
    searchParams.set("page", page.toString());
    return `${pathname}?${searchParams.toString()}`;
};
// src/parsers/parsers.ts
var maybeParseJson = (value)=>{
    try {
        return JSON.parse(value);
    } catch  {
        return value;
    }
};
var maybeStringifyJson = (value)=>{
    if (typeof value === "object") {
        return JSON.stringify(value);
    }
    return value;
};
// src/random/random.ts
var getRandomColor = ()=>{
    return Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0");
};
var getRandomString = ()=>{
    return Math.random().toString(36).substring(2, 15);
};
var getRandomNumber = (min, max)=>{
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
var getRandomElement = (array)=>{
    const index = Math.floor(Math.random() * array.length);
    return array[index];
};
var getRandomProperty = (obj)=>{
    const keys = Object.keys(obj);
    const randomKey = keys[Math.floor(keys.length * Math.random())];
    return obj[randomKey];
};
// src/time/time.ts
var formatDate = (timestamp, dateStyle = "medium", locale = "en-US")=>{
    return new Date(timestamp).toLocaleString(locale, {
        dateStyle
    });
};
var formatTime = (timestamp, timeStyle = "short", locale = "en-US")=>{
    return new Date(timestamp).toLocaleTimeString(locale, {
        timeStyle
    });
};
var formatDateTime = (timestamp, dateStyle = "medium", timeStyle = "short", locale = "en-US")=>{
    return new Date(timestamp).toLocaleString(locale, {
        dateStyle,
        timeStyle
    });
};
var formatDateOrTime = (timestamp, type, dateStyle = "medium", timeStyle = "short", locale = "en-US")=>{
    switch(type){
        case "date":
            return formatDate(timestamp, dateStyle, locale);
        case "time":
            return formatTime(timestamp, timeStyle, locale);
        default:
            return formatDateTime(timestamp, dateStyle, timeStyle, locale);
    }
};
var getReadTime = (content, wpm = 265)=>{
    if (!content) {
        return 0;
    }
    return Math.ceil(content.trim().split(/\s+/).length / wpm);
};
;

})()),
"[project]/node_modules/embla-carousel-reactive-utils/esm/embla-carousel-reactive-utils.esm.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

__turbopack_esm__({
    "areOptionsEqual": ()=>areOptionsEqual,
    "arePluginsEqual": ()=>arePluginsEqual,
    "canUseDOM": ()=>canUseDOM,
    "sortAndMapPluginToOptions": ()=>sortAndMapPluginToOptions
});
function isObject(subject) {
    return Object.prototype.toString.call(subject) === '[object Object]';
}
function isRecord(subject) {
    return isObject(subject) || Array.isArray(subject);
}
function canUseDOM() {
    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
}
function areOptionsEqual(optionsA, optionsB) {
    const optionsAKeys = Object.keys(optionsA);
    const optionsBKeys = Object.keys(optionsB);
    if (optionsAKeys.length !== optionsBKeys.length) return false;
    const breakpointsA = JSON.stringify(Object.keys(optionsA.breakpoints || {}));
    const breakpointsB = JSON.stringify(Object.keys(optionsB.breakpoints || {}));
    if (breakpointsA !== breakpointsB) return false;
    return optionsAKeys.every((key)=>{
        const valueA = optionsA[key];
        const valueB = optionsB[key];
        if (typeof valueA === 'function') return `${valueA}` === `${valueB}`;
        if (!isRecord(valueA) || !isRecord(valueB)) return valueA === valueB;
        return areOptionsEqual(valueA, valueB);
    });
}
function sortAndMapPluginToOptions(plugins) {
    return plugins.concat().sort((a, b)=>a.name > b.name ? 1 : -1).map((plugin)=>plugin.options);
}
function arePluginsEqual(pluginsA, pluginsB) {
    if (pluginsA.length !== pluginsB.length) return false;
    const optionsA = sortAndMapPluginToOptions(pluginsA);
    const optionsB = sortAndMapPluginToOptions(pluginsB);
    return optionsA.every((optionA, index)=>{
        const optionB = optionsB[index];
        return areOptionsEqual(optionA, optionB);
    });
}
;
 //# sourceMappingURL=embla-carousel-reactive-utils.esm.js.map

})()),
"[project]/node_modules/embla-carousel/esm/embla-carousel.esm.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>EmblaCarousel
});
function isNumber(subject) {
    return typeof subject === 'number';
}
function isString(subject) {
    return typeof subject === 'string';
}
function isBoolean(subject) {
    return typeof subject === 'boolean';
}
function isObject(subject) {
    return Object.prototype.toString.call(subject) === '[object Object]';
}
function mathAbs(n) {
    return Math.abs(n);
}
function mathSign(n) {
    return Math.sign(n);
}
function deltaAbs(valueB, valueA) {
    return mathAbs(valueB - valueA);
}
function factorAbs(valueB, valueA) {
    if (valueB === 0 || valueA === 0) return 0;
    if (mathAbs(valueB) <= mathAbs(valueA)) return 0;
    const diff = deltaAbs(mathAbs(valueB), mathAbs(valueA));
    return mathAbs(diff / valueB);
}
function arrayKeys(array) {
    return objectKeys(array).map(Number);
}
function arrayLast(array) {
    return array[arrayLastIndex(array)];
}
function arrayLastIndex(array) {
    return Math.max(0, array.length - 1);
}
function arrayIsLastIndex(array, index) {
    return index === arrayLastIndex(array);
}
function arrayFromNumber(n, startAt = 0) {
    return Array.from(Array(n), (_, i)=>startAt + i);
}
function objectKeys(object) {
    return Object.keys(object);
}
function objectsMergeDeep(objectA, objectB) {
    return [
        objectA,
        objectB
    ].reduce((mergedObjects, currentObject)=>{
        objectKeys(currentObject).forEach((key)=>{
            const valueA = mergedObjects[key];
            const valueB = currentObject[key];
            const areObjects = isObject(valueA) && isObject(valueB);
            mergedObjects[key] = areObjects ? objectsMergeDeep(valueA, valueB) : valueB;
        });
        return mergedObjects;
    }, {});
}
function isMouseEvent(evt, ownerWindow) {
    return typeof ownerWindow.MouseEvent !== 'undefined' && evt instanceof ownerWindow.MouseEvent;
}
function Alignment(align, viewSize) {
    const predefined = {
        start,
        center,
        end
    };
    function start() {
        return 0;
    }
    function center(n) {
        return end(n) / 2;
    }
    function end(n) {
        return viewSize - n;
    }
    function measure(n, index) {
        if (isString(align)) return predefined[align](n);
        return align(viewSize, n, index);
    }
    const self = {
        measure
    };
    return self;
}
function EventStore() {
    let listeners = [];
    function add(node, type, handler, options = {
        passive: true
    }) {
        let removeListener;
        if ('addEventListener' in node) {
            node.addEventListener(type, handler, options);
            removeListener = ()=>node.removeEventListener(type, handler, options);
        } else {
            const legacyMediaQueryList = node;
            legacyMediaQueryList.addListener(handler);
            removeListener = ()=>legacyMediaQueryList.removeListener(handler);
        }
        listeners.push(removeListener);
        return self;
    }
    function clear() {
        listeners = listeners.filter((remove)=>remove());
    }
    const self = {
        add,
        clear
    };
    return self;
}
function Animations(ownerDocument, ownerWindow, update, render) {
    const documentVisibleHandler = EventStore();
    const timeStep = 1000 / 60;
    let lastTimeStamp = null;
    let lag = 0;
    let animationFrame = 0;
    function init() {
        documentVisibleHandler.add(ownerDocument, 'visibilitychange', ()=>{
            if (ownerDocument.hidden) reset();
        });
    }
    function destroy() {
        stop();
        documentVisibleHandler.clear();
    }
    function animate(timeStamp) {
        if (!animationFrame) return;
        if (!lastTimeStamp) lastTimeStamp = timeStamp;
        const elapsed = timeStamp - lastTimeStamp;
        lastTimeStamp = timeStamp;
        lag += elapsed;
        while(lag >= timeStep){
            update(timeStep);
            lag -= timeStep;
        }
        const lagOffset = lag / timeStep;
        render(lagOffset);
        if (animationFrame) ownerWindow.requestAnimationFrame(animate);
    }
    function start() {
        if (animationFrame) return;
        animationFrame = ownerWindow.requestAnimationFrame(animate);
    }
    function stop() {
        ownerWindow.cancelAnimationFrame(animationFrame);
        lastTimeStamp = null;
        lag = 0;
        animationFrame = 0;
    }
    function reset() {
        lastTimeStamp = null;
        lag = 0;
    }
    const self = {
        init,
        destroy,
        start,
        stop,
        update: ()=>update(timeStep),
        render
    };
    return self;
}
function Axis(axis, contentDirection) {
    const isRightToLeft = contentDirection === 'rtl';
    const isVertical = axis === 'y';
    const scroll = isVertical ? 'y' : 'x';
    const cross = isVertical ? 'x' : 'y';
    const sign = !isVertical && isRightToLeft ? -1 : 1;
    const startEdge = getStartEdge();
    const endEdge = getEndEdge();
    function measureSize(nodeRect) {
        const { height, width } = nodeRect;
        return isVertical ? height : width;
    }
    function getStartEdge() {
        if (isVertical) return 'top';
        return isRightToLeft ? 'right' : 'left';
    }
    function getEndEdge() {
        if (isVertical) return 'bottom';
        return isRightToLeft ? 'left' : 'right';
    }
    function direction(n) {
        return n * sign;
    }
    const self = {
        scroll,
        cross,
        startEdge,
        endEdge,
        measureSize,
        direction
    };
    return self;
}
function Limit(min = 0, max = 0) {
    const length = mathAbs(min - max);
    function reachedMin(n) {
        return n < min;
    }
    function reachedMax(n) {
        return n > max;
    }
    function reachedAny(n) {
        return reachedMin(n) || reachedMax(n);
    }
    function constrain(n) {
        if (!reachedAny(n)) return n;
        return reachedMin(n) ? min : max;
    }
    function removeOffset(n) {
        if (!length) return n;
        return n - length * Math.ceil((n - max) / length);
    }
    const self = {
        length,
        max,
        min,
        constrain,
        reachedAny,
        reachedMax,
        reachedMin,
        removeOffset
    };
    return self;
}
function Counter(max, start, loop) {
    const { constrain } = Limit(0, max);
    const loopEnd = max + 1;
    let counter = withinLimit(start);
    function withinLimit(n) {
        return !loop ? constrain(n) : mathAbs((loopEnd + n) % loopEnd);
    }
    function get() {
        return counter;
    }
    function set(n) {
        counter = withinLimit(n);
        return self;
    }
    function add(n) {
        return clone().set(get() + n);
    }
    function clone() {
        return Counter(max, get(), loop);
    }
    const self = {
        get,
        set,
        add,
        clone
    };
    return self;
}
function DragHandler(axis, rootNode, ownerDocument, ownerWindow, target, dragTracker, location, animation, scrollTo, scrollBody, scrollTarget, index, eventHandler, percentOfView, dragFree, dragThreshold, skipSnaps, baseFriction, watchDrag) {
    const { cross: crossAxis, direction } = axis;
    const focusNodes = [
        'INPUT',
        'SELECT',
        'TEXTAREA'
    ];
    const nonPassiveEvent = {
        passive: false
    };
    const initEvents = EventStore();
    const dragEvents = EventStore();
    const goToNextThreshold = Limit(50, 225).constrain(percentOfView.measure(20));
    const snapForceBoost = {
        mouse: 300,
        touch: 400
    };
    const freeForceBoost = {
        mouse: 500,
        touch: 600
    };
    const baseSpeed = dragFree ? 43 : 25;
    let isMoving = false;
    let startScroll = 0;
    let startCross = 0;
    let pointerIsDown = false;
    let preventScroll = false;
    let preventClick = false;
    let isMouse = false;
    function init(emblaApi) {
        if (!watchDrag) return;
        function downIfAllowed(evt) {
            if (isBoolean(watchDrag) || watchDrag(emblaApi, evt)) down(evt);
        }
        const node = rootNode;
        initEvents.add(node, 'dragstart', (evt)=>evt.preventDefault(), nonPassiveEvent).add(node, 'touchmove', ()=>undefined, nonPassiveEvent).add(node, 'touchend', ()=>undefined).add(node, 'touchstart', downIfAllowed).add(node, 'mousedown', downIfAllowed).add(node, 'touchcancel', up).add(node, 'contextmenu', up).add(node, 'click', click, true);
    }
    function destroy() {
        initEvents.clear();
        dragEvents.clear();
    }
    function addDragEvents() {
        const node = isMouse ? ownerDocument : rootNode;
        dragEvents.add(node, 'touchmove', move, nonPassiveEvent).add(node, 'touchend', up).add(node, 'mousemove', move, nonPassiveEvent).add(node, 'mouseup', up);
    }
    function isFocusNode(node) {
        const nodeName = node.nodeName || '';
        return focusNodes.includes(nodeName);
    }
    function forceBoost() {
        const boost = dragFree ? freeForceBoost : snapForceBoost;
        const type = isMouse ? 'mouse' : 'touch';
        return boost[type];
    }
    function allowedForce(force, targetChanged) {
        const next = index.add(mathSign(force) * -1);
        const baseForce = scrollTarget.byDistance(force, !dragFree).distance;
        if (dragFree || mathAbs(force) < goToNextThreshold) return baseForce;
        if (skipSnaps && targetChanged) return baseForce * 0.5;
        return scrollTarget.byIndex(next.get(), 0).distance;
    }
    function down(evt) {
        const isMouseEvt = isMouseEvent(evt, ownerWindow);
        isMouse = isMouseEvt;
        preventClick = dragFree && isMouseEvt && !evt.buttons && isMoving;
        isMoving = deltaAbs(target.get(), location.get()) >= 2;
        if (isMouseEvt && evt.button !== 0) return;
        if (isFocusNode(evt.target)) return;
        pointerIsDown = true;
        dragTracker.pointerDown(evt);
        scrollBody.useFriction(0).useDuration(0);
        target.set(location);
        addDragEvents();
        startScroll = dragTracker.readPoint(evt);
        startCross = dragTracker.readPoint(evt, crossAxis);
        eventHandler.emit('pointerDown');
    }
    function move(evt) {
        const isTouchEvt = !isMouseEvent(evt, ownerWindow);
        if (isTouchEvt && evt.touches.length >= 2) return up(evt);
        const lastScroll = dragTracker.readPoint(evt);
        const lastCross = dragTracker.readPoint(evt, crossAxis);
        const diffScroll = deltaAbs(lastScroll, startScroll);
        const diffCross = deltaAbs(lastCross, startCross);
        if (!preventScroll && !isMouse) {
            if (!evt.cancelable) return up(evt);
            preventScroll = diffScroll > diffCross;
            if (!preventScroll) return up(evt);
        }
        const diff = dragTracker.pointerMove(evt);
        if (diffScroll > dragThreshold) preventClick = true;
        scrollBody.useFriction(0.3).useDuration(0.75);
        animation.start();
        target.add(direction(diff));
        evt.preventDefault();
    }
    function up(evt) {
        const currentLocation = scrollTarget.byDistance(0, false);
        const targetChanged = currentLocation.index !== index.get();
        const rawForce = dragTracker.pointerUp(evt) * forceBoost();
        const force = allowedForce(direction(rawForce), targetChanged);
        const forceFactor = factorAbs(rawForce, force);
        const speed = baseSpeed - 10 * forceFactor;
        const friction = baseFriction + forceFactor / 50;
        preventScroll = false;
        pointerIsDown = false;
        dragEvents.clear();
        scrollBody.useDuration(speed).useFriction(friction);
        scrollTo.distance(force, !dragFree);
        isMouse = false;
        eventHandler.emit('pointerUp');
    }
    function click(evt) {
        if (preventClick) {
            evt.stopPropagation();
            evt.preventDefault();
            preventClick = false;
        }
    }
    function pointerDown() {
        return pointerIsDown;
    }
    const self = {
        init,
        destroy,
        pointerDown
    };
    return self;
}
function DragTracker(axis, ownerWindow) {
    const logInterval = 170;
    let startEvent;
    let lastEvent;
    function readTime(evt) {
        return evt.timeStamp;
    }
    function readPoint(evt, evtAxis) {
        const property = evtAxis || axis.scroll;
        const coord = `client${property === 'x' ? 'X' : 'Y'}`;
        return (isMouseEvent(evt, ownerWindow) ? evt : evt.touches[0])[coord];
    }
    function pointerDown(evt) {
        startEvent = evt;
        lastEvent = evt;
        return readPoint(evt);
    }
    function pointerMove(evt) {
        const diff = readPoint(evt) - readPoint(lastEvent);
        const expired = readTime(evt) - readTime(startEvent) > logInterval;
        lastEvent = evt;
        if (expired) startEvent = evt;
        return diff;
    }
    function pointerUp(evt) {
        if (!startEvent || !lastEvent) return 0;
        const diffDrag = readPoint(lastEvent) - readPoint(startEvent);
        const diffTime = readTime(evt) - readTime(startEvent);
        const expired = readTime(evt) - readTime(lastEvent) > logInterval;
        const force = diffDrag / diffTime;
        const isFlick = diffTime && !expired && mathAbs(force) > 0.1;
        return isFlick ? force : 0;
    }
    const self = {
        pointerDown,
        pointerMove,
        pointerUp,
        readPoint
    };
    return self;
}
function NodeRects() {
    function measure(node) {
        const { offsetTop, offsetLeft, offsetWidth, offsetHeight } = node;
        const offset = {
            top: offsetTop,
            right: offsetLeft + offsetWidth,
            bottom: offsetTop + offsetHeight,
            left: offsetLeft,
            width: offsetWidth,
            height: offsetHeight
        };
        return offset;
    }
    const self = {
        measure
    };
    return self;
}
function PercentOfView(viewSize) {
    function measure(n) {
        return viewSize * (n / 100);
    }
    const self = {
        measure
    };
    return self;
}
function ResizeHandler(container, eventHandler, ownerWindow, slides, axis, watchResize, nodeRects) {
    const observeNodes = [
        container
    ].concat(slides);
    let resizeObserver;
    let containerSize;
    let slideSizes = [];
    let destroyed = false;
    function readSize(node) {
        return axis.measureSize(nodeRects.measure(node));
    }
    function init(emblaApi) {
        if (!watchResize) return;
        containerSize = readSize(container);
        slideSizes = slides.map(readSize);
        function defaultCallback(entries) {
            for (const entry of entries){
                if (destroyed) return;
                const isContainer = entry.target === container;
                const slideIndex = slides.indexOf(entry.target);
                const lastSize = isContainer ? containerSize : slideSizes[slideIndex];
                const newSize = readSize(isContainer ? container : slides[slideIndex]);
                const diffSize = mathAbs(newSize - lastSize);
                if (diffSize >= 0.5) {
                    emblaApi.reInit();
                    eventHandler.emit('resize');
                    break;
                }
            }
        }
        resizeObserver = new ResizeObserver((entries)=>{
            if (isBoolean(watchResize) || watchResize(emblaApi, entries)) {
                defaultCallback(entries);
            }
        });
        ownerWindow.requestAnimationFrame(()=>{
            observeNodes.forEach((node)=>resizeObserver.observe(node));
        });
    }
    function destroy() {
        destroyed = true;
        if (resizeObserver) resizeObserver.disconnect();
    }
    const self = {
        init,
        destroy
    };
    return self;
}
function ScrollBody(location, offsetLocation, previousLocation, target, baseDuration, baseFriction) {
    let bodyVelocity = 0;
    let scrollDirection = 0;
    let scrollDuration = baseDuration;
    let scrollFriction = baseFriction;
    let rawLocation = location.get();
    let rawLocationPrevious = 0;
    function seek(timeStep) {
        const fixedDeltaTimeSeconds = timeStep / 1000;
        const duration = scrollDuration * fixedDeltaTimeSeconds;
        const diff = target.get() - location.get();
        const isInstant = !scrollDuration;
        let directionDiff = 0;
        if (isInstant) {
            bodyVelocity = 0;
            previousLocation.set(target);
            location.set(target);
            directionDiff = diff;
        } else {
            previousLocation.set(location);
            bodyVelocity += diff / duration;
            bodyVelocity *= scrollFriction;
            rawLocation += bodyVelocity;
            location.add(bodyVelocity * fixedDeltaTimeSeconds);
            directionDiff = rawLocation - rawLocationPrevious;
        }
        scrollDirection = mathSign(directionDiff);
        rawLocationPrevious = rawLocation;
        return self;
    }
    function settled() {
        const diff = target.get() - offsetLocation.get();
        return mathAbs(diff) < 0.001;
    }
    function duration() {
        return scrollDuration;
    }
    function direction() {
        return scrollDirection;
    }
    function velocity() {
        return bodyVelocity;
    }
    function useBaseDuration() {
        return useDuration(baseDuration);
    }
    function useBaseFriction() {
        return useFriction(baseFriction);
    }
    function useDuration(n) {
        scrollDuration = n;
        return self;
    }
    function useFriction(n) {
        scrollFriction = n;
        return self;
    }
    const self = {
        direction,
        duration,
        velocity,
        seek,
        settled,
        useBaseFriction,
        useBaseDuration,
        useFriction,
        useDuration
    };
    return self;
}
function ScrollBounds(limit, location, target, scrollBody, percentOfView) {
    const pullBackThreshold = percentOfView.measure(10);
    const edgeOffsetTolerance = percentOfView.measure(50);
    const frictionLimit = Limit(0.1, 0.99);
    let disabled = false;
    function shouldConstrain() {
        if (disabled) return false;
        if (!limit.reachedAny(target.get())) return false;
        if (!limit.reachedAny(location.get())) return false;
        return true;
    }
    function constrain(pointerDown) {
        if (!shouldConstrain()) return;
        const edge = limit.reachedMin(location.get()) ? 'min' : 'max';
        const diffToEdge = mathAbs(limit[edge] - location.get());
        const diffToTarget = target.get() - location.get();
        const friction = frictionLimit.constrain(diffToEdge / edgeOffsetTolerance);
        target.subtract(diffToTarget * friction);
        if (!pointerDown && mathAbs(diffToTarget) < pullBackThreshold) {
            target.set(limit.constrain(target.get()));
            scrollBody.useDuration(25).useBaseFriction();
        }
    }
    function toggleActive(active) {
        disabled = !active;
    }
    const self = {
        shouldConstrain,
        constrain,
        toggleActive
    };
    return self;
}
function ScrollContain(viewSize, contentSize, snapsAligned, containScroll, pixelTolerance) {
    const scrollBounds = Limit(-contentSize + viewSize, 0);
    const snapsBounded = measureBounded();
    const scrollContainLimit = findScrollContainLimit();
    const snapsContained = measureContained();
    function usePixelTolerance(bound, snap) {
        return deltaAbs(bound, snap) < 1;
    }
    function findScrollContainLimit() {
        const startSnap = snapsBounded[0];
        const endSnap = arrayLast(snapsBounded);
        const min = snapsBounded.lastIndexOf(startSnap);
        const max = snapsBounded.indexOf(endSnap) + 1;
        return Limit(min, max);
    }
    function measureBounded() {
        return snapsAligned.map((snapAligned, index)=>{
            const { min, max } = scrollBounds;
            const snap = scrollBounds.constrain(snapAligned);
            const isFirst = !index;
            const isLast = arrayIsLastIndex(snapsAligned, index);
            if (isFirst) return max;
            if (isLast) return min;
            if (usePixelTolerance(min, snap)) return min;
            if (usePixelTolerance(max, snap)) return max;
            return snap;
        }).map((scrollBound)=>parseFloat(scrollBound.toFixed(3)));
    }
    function measureContained() {
        if (contentSize <= viewSize + pixelTolerance) return [
            scrollBounds.max
        ];
        if (containScroll === 'keepSnaps') return snapsBounded;
        const { min, max } = scrollContainLimit;
        return snapsBounded.slice(min, max);
    }
    const self = {
        snapsContained,
        scrollContainLimit
    };
    return self;
}
function ScrollLimit(contentSize, scrollSnaps, loop) {
    const max = scrollSnaps[0];
    const min = loop ? max - contentSize : arrayLast(scrollSnaps);
    const limit = Limit(min, max);
    const self = {
        limit
    };
    return self;
}
function ScrollLooper(contentSize, limit, location, vectors) {
    const jointSafety = 0.1;
    const min = limit.min + jointSafety;
    const max = limit.max + jointSafety;
    const { reachedMin, reachedMax } = Limit(min, max);
    function shouldLoop(direction) {
        if (direction === 1) return reachedMax(location.get());
        if (direction === -1) return reachedMin(location.get());
        return false;
    }
    function loop(direction) {
        if (!shouldLoop(direction)) return;
        const loopDistance = contentSize * (direction * -1);
        vectors.forEach((v)=>v.add(loopDistance));
    }
    const self = {
        loop
    };
    return self;
}
function ScrollProgress(limit) {
    const { max, length } = limit;
    function get(n) {
        const currentLocation = n - max;
        return length ? currentLocation / -length : 0;
    }
    const self = {
        get
    };
    return self;
}
function ScrollSnaps(axis, alignment, containerRect, slideRects, slidesToScroll) {
    const { startEdge, endEdge } = axis;
    const { groupSlides } = slidesToScroll;
    const alignments = measureSizes().map(alignment.measure);
    const snaps = measureUnaligned();
    const snapsAligned = measureAligned();
    function measureSizes() {
        return groupSlides(slideRects).map((rects)=>arrayLast(rects)[endEdge] - rects[0][startEdge]).map(mathAbs);
    }
    function measureUnaligned() {
        return slideRects.map((rect)=>containerRect[startEdge] - rect[startEdge]).map((snap)=>-mathAbs(snap));
    }
    function measureAligned() {
        return groupSlides(snaps).map((g)=>g[0]).map((snap, index)=>snap + alignments[index]);
    }
    const self = {
        snaps,
        snapsAligned
    };
    return self;
}
function SlideRegistry(containSnaps, containScroll, scrollSnaps, scrollContainLimit, slidesToScroll, slideIndexes) {
    const { groupSlides } = slidesToScroll;
    const { min, max } = scrollContainLimit;
    const slideRegistry = createSlideRegistry();
    function createSlideRegistry() {
        const groupedSlideIndexes = groupSlides(slideIndexes);
        const doNotContain = !containSnaps || containScroll === 'keepSnaps';
        if (scrollSnaps.length === 1) return [
            slideIndexes
        ];
        if (doNotContain) return groupedSlideIndexes;
        return groupedSlideIndexes.slice(min, max).map((group, index, groups)=>{
            const isFirst = !index;
            const isLast = arrayIsLastIndex(groups, index);
            if (isFirst) {
                const range = arrayLast(groups[0]) + 1;
                return arrayFromNumber(range);
            }
            if (isLast) {
                const range = arrayLastIndex(slideIndexes) - arrayLast(groups)[0] + 1;
                return arrayFromNumber(range, arrayLast(groups)[0]);
            }
            return group;
        });
    }
    const self = {
        slideRegistry
    };
    return self;
}
function ScrollTarget(loop, scrollSnaps, contentSize, limit, targetVector) {
    const { reachedAny, removeOffset, constrain } = limit;
    function minDistance(distances) {
        return distances.concat().sort((a, b)=>mathAbs(a) - mathAbs(b))[0];
    }
    function findTargetSnap(target) {
        const distance = loop ? removeOffset(target) : constrain(target);
        const ascDiffsToSnaps = scrollSnaps.map((snap, index)=>({
                diff: shortcut(snap - distance, 0),
                index
            })).sort((d1, d2)=>mathAbs(d1.diff) - mathAbs(d2.diff));
        const { index } = ascDiffsToSnaps[0];
        return {
            index,
            distance
        };
    }
    function shortcut(target, direction) {
        const targets = [
            target,
            target + contentSize,
            target - contentSize
        ];
        if (!loop) return target;
        if (!direction) return minDistance(targets);
        const matchingTargets = targets.filter((t)=>mathSign(t) === direction);
        if (matchingTargets.length) return minDistance(matchingTargets);
        return arrayLast(targets) - contentSize;
    }
    function byIndex(index, direction) {
        const diffToSnap = scrollSnaps[index] - targetVector.get();
        const distance = shortcut(diffToSnap, direction);
        return {
            index,
            distance
        };
    }
    function byDistance(distance, snap) {
        const target = targetVector.get() + distance;
        const { index, distance: targetSnapDistance } = findTargetSnap(target);
        const reachedBound = !loop && reachedAny(target);
        if (!snap || reachedBound) return {
            index,
            distance
        };
        const diffToSnap = scrollSnaps[index] - targetSnapDistance;
        const snapDistance = distance + shortcut(diffToSnap, 0);
        return {
            index,
            distance: snapDistance
        };
    }
    const self = {
        byDistance,
        byIndex,
        shortcut
    };
    return self;
}
function ScrollTo(animation, indexCurrent, indexPrevious, scrollBody, scrollTarget, targetVector, eventHandler) {
    function scrollTo(target) {
        const distanceDiff = target.distance;
        const indexDiff = target.index !== indexCurrent.get();
        targetVector.add(distanceDiff);
        if (distanceDiff) {
            if (scrollBody.duration()) {
                animation.start();
            } else {
                animation.update();
                animation.render(1);
                animation.update();
            }
        }
        if (indexDiff) {
            indexPrevious.set(indexCurrent.get());
            indexCurrent.set(target.index);
            eventHandler.emit('select');
        }
    }
    function distance(n, snap) {
        const target = scrollTarget.byDistance(n, snap);
        scrollTo(target);
    }
    function index(n, direction) {
        const targetIndex = indexCurrent.clone().set(n);
        const target = scrollTarget.byIndex(targetIndex.get(), direction);
        scrollTo(target);
    }
    const self = {
        distance,
        index
    };
    return self;
}
function SlideFocus(root, slides, slideRegistry, scrollTo, scrollBody, eventStore, eventHandler, watchFocus) {
    const focusListenerOptions = {
        passive: true,
        capture: true
    };
    let lastTabPressTime = 0;
    function init(emblaApi) {
        if (!watchFocus) return;
        function defaultCallback(index) {
            const nowTime = new Date().getTime();
            const diffTime = nowTime - lastTabPressTime;
            if (diffTime > 10) return;
            eventHandler.emit('slideFocusStart');
            root.scrollLeft = 0;
            const group = slideRegistry.findIndex((group)=>group.includes(index));
            if (!isNumber(group)) return;
            scrollBody.useDuration(0);
            scrollTo.index(group, 0);
            eventHandler.emit('slideFocus');
        }
        eventStore.add(document, 'keydown', registerTabPress, false);
        slides.forEach((slide, slideIndex)=>{
            eventStore.add(slide, 'focus', (evt)=>{
                if (isBoolean(watchFocus) || watchFocus(emblaApi, evt)) {
                    defaultCallback(slideIndex);
                }
            }, focusListenerOptions);
        });
    }
    function registerTabPress(event) {
        if (event.code === 'Tab') lastTabPressTime = new Date().getTime();
    }
    const self = {
        init
    };
    return self;
}
function Vector1D(initialValue) {
    let value = initialValue;
    function get() {
        return value;
    }
    function set(n) {
        value = normalizeInput(n);
    }
    function add(n) {
        value += normalizeInput(n);
    }
    function subtract(n) {
        value -= normalizeInput(n);
    }
    function normalizeInput(n) {
        return isNumber(n) ? n : n.get();
    }
    const self = {
        get,
        set,
        add,
        subtract
    };
    return self;
}
function Translate(axis, container) {
    const translate = axis.scroll === 'x' ? x : y;
    const containerStyle = container.style;
    let disabled = false;
    function x(n) {
        return `translate3d(${n}px,0px,0px)`;
    }
    function y(n) {
        return `translate3d(0px,${n}px,0px)`;
    }
    function to(target) {
        if (disabled) return;
        containerStyle.transform = translate(axis.direction(target));
    }
    function toggleActive(active) {
        disabled = !active;
    }
    function clear() {
        if (disabled) return;
        containerStyle.transform = '';
        if (!container.getAttribute('style')) container.removeAttribute('style');
    }
    const self = {
        clear,
        to,
        toggleActive
    };
    return self;
}
function SlideLooper(axis, viewSize, contentSize, slideSizes, slideSizesWithGaps, snaps, scrollSnaps, location, slides) {
    const roundingSafety = 0.5;
    const ascItems = arrayKeys(slideSizesWithGaps);
    const descItems = arrayKeys(slideSizesWithGaps).reverse();
    const loopPoints = startPoints().concat(endPoints());
    function removeSlideSizes(indexes, from) {
        return indexes.reduce((a, i)=>{
            return a - slideSizesWithGaps[i];
        }, from);
    }
    function slidesInGap(indexes, gap) {
        return indexes.reduce((a, i)=>{
            const remainingGap = removeSlideSizes(a, gap);
            return remainingGap > 0 ? a.concat([
                i
            ]) : a;
        }, []);
    }
    function findSlideBounds(offset) {
        return snaps.map((snap, index)=>({
                start: snap - slideSizes[index] + roundingSafety + offset,
                end: snap + viewSize - roundingSafety + offset
            }));
    }
    function findLoopPoints(indexes, offset, isEndEdge) {
        const slideBounds = findSlideBounds(offset);
        return indexes.map((index)=>{
            const initial = isEndEdge ? 0 : -contentSize;
            const altered = isEndEdge ? contentSize : 0;
            const boundEdge = isEndEdge ? 'end' : 'start';
            const loopPoint = slideBounds[index][boundEdge];
            return {
                index,
                loopPoint,
                slideLocation: Vector1D(-1),
                translate: Translate(axis, slides[index]),
                target: ()=>location.get() > loopPoint ? initial : altered
            };
        });
    }
    function startPoints() {
        const gap = scrollSnaps[0];
        const indexes = slidesInGap(descItems, gap);
        return findLoopPoints(indexes, contentSize, false);
    }
    function endPoints() {
        const gap = viewSize - scrollSnaps[0] - 1;
        const indexes = slidesInGap(ascItems, gap);
        return findLoopPoints(indexes, -contentSize, true);
    }
    function canLoop() {
        return loopPoints.every(({ index })=>{
            const otherIndexes = ascItems.filter((i)=>i !== index);
            return removeSlideSizes(otherIndexes, viewSize) <= 0.1;
        });
    }
    function loop() {
        loopPoints.forEach((loopPoint)=>{
            const { target, translate, slideLocation } = loopPoint;
            const shiftLocation = target();
            if (shiftLocation === slideLocation.get()) return;
            translate.to(shiftLocation);
            slideLocation.set(shiftLocation);
        });
    }
    function clear() {
        loopPoints.forEach((loopPoint)=>loopPoint.translate.clear());
    }
    const self = {
        canLoop,
        clear,
        loop,
        loopPoints
    };
    return self;
}
function SlidesHandler(container, eventHandler, watchSlides) {
    let mutationObserver;
    let destroyed = false;
    function init(emblaApi) {
        if (!watchSlides) return;
        function defaultCallback(mutations) {
            for (const mutation of mutations){
                if (mutation.type === 'childList') {
                    emblaApi.reInit();
                    eventHandler.emit('slidesChanged');
                    break;
                }
            }
        }
        mutationObserver = new MutationObserver((mutations)=>{
            if (destroyed) return;
            if (isBoolean(watchSlides) || watchSlides(emblaApi, mutations)) {
                defaultCallback(mutations);
            }
        });
        mutationObserver.observe(container, {
            childList: true
        });
    }
    function destroy() {
        if (mutationObserver) mutationObserver.disconnect();
        destroyed = true;
    }
    const self = {
        init,
        destroy
    };
    return self;
}
function SlidesInView(container, slides, eventHandler, threshold) {
    const intersectionEntryMap = {};
    let inViewCache = null;
    let notInViewCache = null;
    let intersectionObserver;
    let destroyed = false;
    function init() {
        intersectionObserver = new IntersectionObserver((entries)=>{
            if (destroyed) return;
            entries.forEach((entry)=>{
                const index = slides.indexOf(entry.target);
                intersectionEntryMap[index] = entry;
            });
            inViewCache = null;
            notInViewCache = null;
            eventHandler.emit('slidesInView');
        }, {
            root: container.parentElement,
            threshold
        });
        slides.forEach((slide)=>intersectionObserver.observe(slide));
    }
    function destroy() {
        if (intersectionObserver) intersectionObserver.disconnect();
        destroyed = true;
    }
    function createInViewList(inView) {
        return objectKeys(intersectionEntryMap).reduce((list, slideIndex)=>{
            const index = parseInt(slideIndex);
            const { isIntersecting } = intersectionEntryMap[index];
            const inViewMatch = inView && isIntersecting;
            const notInViewMatch = !inView && !isIntersecting;
            if (inViewMatch || notInViewMatch) list.push(index);
            return list;
        }, []);
    }
    function get(inView = true) {
        if (inView && inViewCache) return inViewCache;
        if (!inView && notInViewCache) return notInViewCache;
        const slideIndexes = createInViewList(inView);
        if (inView) inViewCache = slideIndexes;
        if (!inView) notInViewCache = slideIndexes;
        return slideIndexes;
    }
    const self = {
        init,
        destroy,
        get
    };
    return self;
}
function SlideSizes(axis, containerRect, slideRects, slides, readEdgeGap, ownerWindow) {
    const { measureSize, startEdge, endEdge } = axis;
    const withEdgeGap = slideRects[0] && readEdgeGap;
    const startGap = measureStartGap();
    const endGap = measureEndGap();
    const slideSizes = slideRects.map(measureSize);
    const slideSizesWithGaps = measureWithGaps();
    function measureStartGap() {
        if (!withEdgeGap) return 0;
        const slideRect = slideRects[0];
        return mathAbs(containerRect[startEdge] - slideRect[startEdge]);
    }
    function measureEndGap() {
        if (!withEdgeGap) return 0;
        const style = ownerWindow.getComputedStyle(arrayLast(slides));
        return parseFloat(style.getPropertyValue(`margin-${endEdge}`));
    }
    function measureWithGaps() {
        return slideRects.map((rect, index, rects)=>{
            const isFirst = !index;
            const isLast = arrayIsLastIndex(rects, index);
            if (isFirst) return slideSizes[index] + startGap;
            if (isLast) return slideSizes[index] + endGap;
            return rects[index + 1][startEdge] - rect[startEdge];
        }).map(mathAbs);
    }
    const self = {
        slideSizes,
        slideSizesWithGaps,
        startGap,
        endGap
    };
    return self;
}
function SlidesToScroll(axis, viewSize, slidesToScroll, loop, containerRect, slideRects, startGap, endGap, pixelTolerance) {
    const { startEdge, endEdge, direction } = axis;
    const groupByNumber = isNumber(slidesToScroll);
    function byNumber(array, groupSize) {
        return arrayKeys(array).filter((i)=>i % groupSize === 0).map((i)=>array.slice(i, i + groupSize));
    }
    function bySize(array) {
        if (!array.length) return [];
        return arrayKeys(array).reduce((groups, rectB, index)=>{
            const rectA = arrayLast(groups) || 0;
            const isFirst = rectA === 0;
            const isLast = rectB === arrayLastIndex(array);
            const edgeA = containerRect[startEdge] - slideRects[rectA][startEdge];
            const edgeB = containerRect[startEdge] - slideRects[rectB][endEdge];
            const gapA = !loop && isFirst ? direction(startGap) : 0;
            const gapB = !loop && isLast ? direction(endGap) : 0;
            const chunkSize = mathAbs(edgeB - gapB - (edgeA + gapA));
            if (index && chunkSize > viewSize + pixelTolerance) groups.push(rectB);
            if (isLast) groups.push(array.length);
            return groups;
        }, []).map((currentSize, index, groups)=>{
            const previousSize = Math.max(groups[index - 1] || 0);
            return array.slice(previousSize, currentSize);
        });
    }
    function groupSlides(array) {
        return groupByNumber ? byNumber(array, slidesToScroll) : bySize(array);
    }
    const self = {
        groupSlides
    };
    return self;
}
function Engine(root, container, slides, ownerDocument, ownerWindow, options, eventHandler) {
    // Options
    const { align, axis: scrollAxis, direction, startIndex, loop, duration, dragFree, dragThreshold, inViewThreshold, slidesToScroll: groupSlides, skipSnaps, containScroll, watchResize, watchSlides, watchDrag, watchFocus } = options;
    // Measurements
    const pixelTolerance = 2;
    const nodeRects = NodeRects();
    const containerRect = nodeRects.measure(container);
    const slideRects = slides.map(nodeRects.measure);
    const axis = Axis(scrollAxis, direction);
    const viewSize = axis.measureSize(containerRect);
    const percentOfView = PercentOfView(viewSize);
    const alignment = Alignment(align, viewSize);
    const containSnaps = !loop && !!containScroll;
    const readEdgeGap = loop || !!containScroll;
    const { slideSizes, slideSizesWithGaps, startGap, endGap } = SlideSizes(axis, containerRect, slideRects, slides, readEdgeGap, ownerWindow);
    const slidesToScroll = SlidesToScroll(axis, viewSize, groupSlides, loop, containerRect, slideRects, startGap, endGap, pixelTolerance);
    const { snaps, snapsAligned } = ScrollSnaps(axis, alignment, containerRect, slideRects, slidesToScroll);
    const contentSize = -arrayLast(snaps) + arrayLast(slideSizesWithGaps);
    const { snapsContained, scrollContainLimit } = ScrollContain(viewSize, contentSize, snapsAligned, containScroll, pixelTolerance);
    const scrollSnaps = containSnaps ? snapsContained : snapsAligned;
    const { limit } = ScrollLimit(contentSize, scrollSnaps, loop);
    // Indexes
    const index = Counter(arrayLastIndex(scrollSnaps), startIndex, loop);
    const indexPrevious = index.clone();
    const slideIndexes = arrayKeys(slides);
    // Animation
    const update = ({ dragHandler, scrollBody, scrollBounds, options: { loop } }, timeStep)=>{
        if (!loop) scrollBounds.constrain(dragHandler.pointerDown());
        scrollBody.seek(timeStep);
    };
    const render = ({ scrollBody, translate, location, offsetLocation, scrollLooper, slideLooper, dragHandler, animation, eventHandler, scrollBounds, options: { loop } }, lagOffset)=>{
        const shouldSettle = scrollBody.settled();
        const withinBounds = !scrollBounds.shouldConstrain();
        const hasSettled = loop ? shouldSettle : shouldSettle && withinBounds;
        if (hasSettled && !dragHandler.pointerDown()) {
            animation.stop();
            eventHandler.emit('settle');
        }
        if (!hasSettled) eventHandler.emit('scroll');
        const interpolatedLocation = location.get() * lagOffset + previousLocation.get() * (1 - lagOffset);
        offsetLocation.set(interpolatedLocation);
        if (loop) {
            scrollLooper.loop(scrollBody.direction());
            slideLooper.loop();
        }
        translate.to(offsetLocation.get());
    };
    const animation = Animations(ownerDocument, ownerWindow, (timeStep)=>update(engine, timeStep), (lagOffset)=>render(engine, lagOffset));
    // Shared
    const friction = 0.68;
    const startLocation = scrollSnaps[index.get()];
    const location = Vector1D(startLocation);
    const previousLocation = Vector1D(startLocation);
    const offsetLocation = Vector1D(startLocation);
    const target = Vector1D(startLocation);
    const scrollBody = ScrollBody(location, offsetLocation, previousLocation, target, duration, friction);
    const scrollTarget = ScrollTarget(loop, scrollSnaps, contentSize, limit, target);
    const scrollTo = ScrollTo(animation, index, indexPrevious, scrollBody, scrollTarget, target, eventHandler);
    const scrollProgress = ScrollProgress(limit);
    const eventStore = EventStore();
    const slidesInView = SlidesInView(container, slides, eventHandler, inViewThreshold);
    const { slideRegistry } = SlideRegistry(containSnaps, containScroll, scrollSnaps, scrollContainLimit, slidesToScroll, slideIndexes);
    const slideFocus = SlideFocus(root, slides, slideRegistry, scrollTo, scrollBody, eventStore, eventHandler, watchFocus);
    // Engine
    const engine = {
        ownerDocument,
        ownerWindow,
        eventHandler,
        containerRect,
        slideRects,
        animation,
        axis,
        dragHandler: DragHandler(axis, root, ownerDocument, ownerWindow, target, DragTracker(axis, ownerWindow), location, animation, scrollTo, scrollBody, scrollTarget, index, eventHandler, percentOfView, dragFree, dragThreshold, skipSnaps, friction, watchDrag),
        eventStore,
        percentOfView,
        index,
        indexPrevious,
        limit,
        location,
        offsetLocation,
        previousLocation,
        options,
        resizeHandler: ResizeHandler(container, eventHandler, ownerWindow, slides, axis, watchResize, nodeRects),
        scrollBody,
        scrollBounds: ScrollBounds(limit, offsetLocation, target, scrollBody, percentOfView),
        scrollLooper: ScrollLooper(contentSize, limit, offsetLocation, [
            location,
            offsetLocation,
            previousLocation,
            target
        ]),
        scrollProgress,
        scrollSnapList: scrollSnaps.map(scrollProgress.get),
        scrollSnaps,
        scrollTarget,
        scrollTo,
        slideLooper: SlideLooper(axis, viewSize, contentSize, slideSizes, slideSizesWithGaps, snaps, scrollSnaps, offsetLocation, slides),
        slideFocus,
        slidesHandler: SlidesHandler(container, eventHandler, watchSlides),
        slidesInView,
        slideIndexes,
        slideRegistry,
        slidesToScroll,
        target,
        translate: Translate(axis, container)
    };
    return engine;
}
function EventHandler() {
    let listeners = {};
    let api;
    function init(emblaApi) {
        api = emblaApi;
    }
    function getListeners(evt) {
        return listeners[evt] || [];
    }
    function emit(evt) {
        getListeners(evt).forEach((e)=>e(api, evt));
        return self;
    }
    function on(evt, cb) {
        listeners[evt] = getListeners(evt).concat([
            cb
        ]);
        return self;
    }
    function off(evt, cb) {
        listeners[evt] = getListeners(evt).filter((e)=>e !== cb);
        return self;
    }
    function clear() {
        listeners = {};
    }
    const self = {
        init,
        emit,
        off,
        on,
        clear
    };
    return self;
}
const defaultOptions = {
    align: 'center',
    axis: 'x',
    container: null,
    slides: null,
    containScroll: 'trimSnaps',
    direction: 'ltr',
    slidesToScroll: 1,
    inViewThreshold: 0,
    breakpoints: {},
    dragFree: false,
    dragThreshold: 10,
    loop: false,
    skipSnaps: false,
    duration: 25,
    startIndex: 0,
    active: true,
    watchDrag: true,
    watchResize: true,
    watchSlides: true,
    watchFocus: true
};
function OptionsHandler(ownerWindow) {
    function mergeOptions(optionsA, optionsB) {
        return objectsMergeDeep(optionsA, optionsB || {});
    }
    function optionsAtMedia(options) {
        const optionsAtMedia = options.breakpoints || {};
        const matchedMediaOptions = objectKeys(optionsAtMedia).filter((media)=>ownerWindow.matchMedia(media).matches).map((media)=>optionsAtMedia[media]).reduce((a, mediaOption)=>mergeOptions(a, mediaOption), {});
        return mergeOptions(options, matchedMediaOptions);
    }
    function optionsMediaQueries(optionsList) {
        return optionsList.map((options)=>objectKeys(options.breakpoints || {})).reduce((acc, mediaQueries)=>acc.concat(mediaQueries), []).map(ownerWindow.matchMedia);
    }
    const self = {
        mergeOptions,
        optionsAtMedia,
        optionsMediaQueries
    };
    return self;
}
function PluginsHandler(optionsHandler) {
    let activePlugins = [];
    function init(emblaApi, plugins) {
        activePlugins = plugins.filter(({ options })=>optionsHandler.optionsAtMedia(options).active !== false);
        activePlugins.forEach((plugin)=>plugin.init(emblaApi, optionsHandler));
        return plugins.reduce((map, plugin)=>Object.assign(map, {
                [plugin.name]: plugin
            }), {});
    }
    function destroy() {
        activePlugins = activePlugins.filter((plugin)=>plugin.destroy());
    }
    const self = {
        init,
        destroy
    };
    return self;
}
function EmblaCarousel(root, userOptions, userPlugins) {
    const ownerDocument = root.ownerDocument;
    const ownerWindow = ownerDocument.defaultView;
    const optionsHandler = OptionsHandler(ownerWindow);
    const pluginsHandler = PluginsHandler(optionsHandler);
    const mediaHandlers = EventStore();
    const eventHandler = EventHandler();
    const { mergeOptions, optionsAtMedia, optionsMediaQueries } = optionsHandler;
    const { on, off, emit } = eventHandler;
    const reInit = reActivate;
    let destroyed = false;
    let engine;
    let optionsBase = mergeOptions(defaultOptions, EmblaCarousel.globalOptions);
    let options = mergeOptions(optionsBase);
    let pluginList = [];
    let pluginApis;
    let container;
    let slides;
    function storeElements() {
        const { container: userContainer, slides: userSlides } = options;
        const customContainer = isString(userContainer) ? root.querySelector(userContainer) : userContainer;
        container = customContainer || root.children[0];
        const customSlides = isString(userSlides) ? container.querySelectorAll(userSlides) : userSlides;
        slides = [].slice.call(customSlides || container.children);
    }
    function createEngine(options) {
        const engine = Engine(root, container, slides, ownerDocument, ownerWindow, options, eventHandler);
        if (options.loop && !engine.slideLooper.canLoop()) {
            const optionsWithoutLoop = Object.assign({}, options, {
                loop: false
            });
            return createEngine(optionsWithoutLoop);
        }
        return engine;
    }
    function activate(withOptions, withPlugins) {
        if (destroyed) return;
        optionsBase = mergeOptions(optionsBase, withOptions);
        options = optionsAtMedia(optionsBase);
        pluginList = withPlugins || pluginList;
        storeElements();
        engine = createEngine(options);
        optionsMediaQueries([
            optionsBase,
            ...pluginList.map(({ options })=>options)
        ]).forEach((query)=>mediaHandlers.add(query, 'change', reActivate));
        if (!options.active) return;
        engine.translate.to(engine.location.get());
        engine.animation.init();
        engine.slidesInView.init();
        engine.slideFocus.init(self);
        engine.eventHandler.init(self);
        engine.resizeHandler.init(self);
        engine.slidesHandler.init(self);
        if (engine.options.loop) engine.slideLooper.loop();
        if (container.offsetParent && slides.length) engine.dragHandler.init(self);
        pluginApis = pluginsHandler.init(self, pluginList);
    }
    function reActivate(withOptions, withPlugins) {
        const startIndex = selectedScrollSnap();
        deActivate();
        activate(mergeOptions({
            startIndex
        }, withOptions), withPlugins);
        eventHandler.emit('reInit');
    }
    function deActivate() {
        engine.dragHandler.destroy();
        engine.eventStore.clear();
        engine.translate.clear();
        engine.slideLooper.clear();
        engine.resizeHandler.destroy();
        engine.slidesHandler.destroy();
        engine.slidesInView.destroy();
        engine.animation.destroy();
        pluginsHandler.destroy();
        mediaHandlers.clear();
    }
    function destroy() {
        if (destroyed) return;
        destroyed = true;
        mediaHandlers.clear();
        deActivate();
        eventHandler.emit('destroy');
        eventHandler.clear();
    }
    function scrollTo(index, jump, direction) {
        if (!options.active || destroyed) return;
        engine.scrollBody.useBaseFriction().useDuration(jump === true ? 0 : options.duration);
        engine.scrollTo.index(index, direction || 0);
    }
    function scrollNext(jump) {
        const next = engine.index.add(1).get();
        scrollTo(next, jump, -1);
    }
    function scrollPrev(jump) {
        const prev = engine.index.add(-1).get();
        scrollTo(prev, jump, 1);
    }
    function canScrollNext() {
        const next = engine.index.add(1).get();
        return next !== selectedScrollSnap();
    }
    function canScrollPrev() {
        const prev = engine.index.add(-1).get();
        return prev !== selectedScrollSnap();
    }
    function scrollSnapList() {
        return engine.scrollSnapList;
    }
    function scrollProgress() {
        return engine.scrollProgress.get(engine.location.get());
    }
    function selectedScrollSnap() {
        return engine.index.get();
    }
    function previousScrollSnap() {
        return engine.indexPrevious.get();
    }
    function slidesInView() {
        return engine.slidesInView.get();
    }
    function slidesNotInView() {
        return engine.slidesInView.get(false);
    }
    function plugins() {
        return pluginApis;
    }
    function internalEngine() {
        return engine;
    }
    function rootNode() {
        return root;
    }
    function containerNode() {
        return container;
    }
    function slideNodes() {
        return slides;
    }
    const self = {
        canScrollNext,
        canScrollPrev,
        containerNode,
        internalEngine,
        destroy,
        off,
        on,
        emit,
        plugins,
        previousScrollSnap,
        reInit,
        rootNode,
        scrollNext,
        scrollPrev,
        scrollProgress,
        scrollSnapList,
        scrollTo,
        selectedScrollSnap,
        slideNodes,
        slidesInView,
        slidesNotInView
    };
    activate(userOptions, userPlugins);
    setTimeout(()=>eventHandler.emit('init'), 0);
    return self;
}
EmblaCarousel.globalOptions = undefined;
;
 //# sourceMappingURL=embla-carousel.esm.js.map

})()),
"[project]/node_modules/embla-carousel-react/esm/embla-carousel-react.esm.js [app-client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

__turbopack_esm__({
    "default": ()=>useEmblaCarousel
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2d$reactive$2d$utils$2f$esm$2f$embla$2d$carousel$2d$reactive$2d$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/embla-carousel-reactive-utils/esm/embla-carousel-reactive-utils.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2f$esm$2f$embla$2d$carousel$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/embla-carousel/esm/embla-carousel.esm.js [app-client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
;
;
;
function useEmblaCarousel(options = {}, plugins = []) {
    const storedOptions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(options);
    const storedPlugins = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useRef"])(plugins);
    const [emblaApi, setEmblaApi] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])();
    const [viewport, setViewport] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])();
    const reInit = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useCallback"])(()=>{
        if (emblaApi) emblaApi.reInit(storedOptions.current, storedPlugins.current);
    }, [
        emblaApi
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2d$reactive$2d$utils$2f$esm$2f$embla$2d$carousel$2d$reactive$2d$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["areOptionsEqual"])(storedOptions.current, options)) return;
        storedOptions.current = options;
        reInit();
    }, [
        options,
        reInit
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2d$reactive$2d$utils$2f$esm$2f$embla$2d$carousel$2d$reactive$2d$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["arePluginsEqual"])(storedPlugins.current, plugins)) return;
        storedPlugins.current = plugins;
        reInit();
    }, [
        plugins,
        reInit
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2d$reactive$2d$utils$2f$esm$2f$embla$2d$carousel$2d$reactive$2d$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["canUseDOM"])() && viewport) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2f$esm$2f$embla$2d$carousel$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].globalOptions = useEmblaCarousel.globalOptions;
            const newEmblaApi = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$embla$2d$carousel$2f$esm$2f$embla$2d$carousel$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(viewport, storedOptions.current, storedPlugins.current);
            setEmblaApi(newEmblaApi);
            return ()=>newEmblaApi.destroy();
        } else {
            setEmblaApi(undefined);
        }
    }, [
        viewport,
        setEmblaApi
    ]);
    return [
        setViewport,
        emblaApi
    ];
}
useEmblaCarousel.globalOptions = undefined;
;
 //# sourceMappingURL=embla-carousel-react.esm.js.map

})()),
}]);

//# sourceMappingURL=node_modules_dafdc6._.js.map